# This code was auto-generated by ./generate_SSE_assembly.py.
# The command line given was:
#
#  ./generate_SSE_assembly.py -N 4 --name stream_kernel_21

# Function ABI.
#define number_stream_elements %rdi
#define alpha                  %xmm0
#define multiply_stream        %rsi

# Define SSE registers used for C matrix
#define C1 %xmm1
#define C2 %xmm2
#define C3 %xmm3
#define C4 %xmm4

# Define SSE registeres used for B matrix
#define B1 %xmm5
#define B2 %xmm6
#define B3 %xmm7
#define B4 %xmm8

# Define SSE registeres used for A matrix
#define A11 %xmm9
#define A12 %xmm10
#define A13 %xmm11
#define A14 %xmm12
#define A21 %xmm13
#define A22 %xmm14
#define A23 %xmm15
#define A24 %xmm9
#define A31 %xmm10
#define A32 %xmm11
#define A33 %xmm12
#define A34 %xmm13
#define A41 %xmm14
#define A42 %xmm15
#define A43 %xmm9
#define A44 %xmm10

# Define loop variables.
#define index        %rax
#define base_pointer %rdx

# Define pointers to matrix blocks in stream.
#define A %r8
#define B %rcx
#define C %r9

# Define offsets into matrix blocks.

#define A_OFFSET_11 (0*4+0)*64*4 // 0 = 0x0
#define A_OFFSET_12 (0*4+1)*64*4 // 64 = 0x40
#define A_OFFSET_13 (0*4+2)*64*4 // 128 = 0x80
#define A_OFFSET_14 (0*4+3)*64*4 // 192 = 0xc0
#define A_OFFSET_21 (1*4+0)*64*4 // 256 = 0x100
#define A_OFFSET_22 (1*4+1)*64*4 // 320 = 0x140
#define A_OFFSET_23 (1*4+2)*64*4 // 384 = 0x180
#define A_OFFSET_24 (1*4+3)*64*4 // 448 = 0x1c0
#define A_OFFSET_31 (2*4+0)*64*4 // 512 = 0x200
#define A_OFFSET_32 (2*4+1)*64*4 // 576 = 0x240
#define A_OFFSET_33 (2*4+2)*64*4 // 640 = 0x280
#define A_OFFSET_34 (2*4+3)*64*4 // 704 = 0x2c0
#define A_OFFSET_41 (3*4+0)*64*4 // 768 = 0x300
#define A_OFFSET_42 (3*4+1)*64*4 // 832 = 0x340
#define A_OFFSET_43 (3*4+2)*64*4 // 896 = 0x380
#define A_OFFSET_44 (3*4+3)*64*4 // 960 = 0x3c0

#define B_OFFSET_11 (0*4+0)*16*4 // 0 = 0x0
#define B_OFFSET_12 (0*4+1)*16*4 // 16 = 0x10
#define B_OFFSET_13 (0*4+2)*16*4 // 32 = 0x20
#define B_OFFSET_14 (0*4+3)*16*4 // 48 = 0x30
#define B_OFFSET_21 (1*4+0)*16*4 // 64 = 0x40
#define B_OFFSET_22 (1*4+1)*16*4 // 80 = 0x50
#define B_OFFSET_23 (1*4+2)*16*4 // 96 = 0x60
#define B_OFFSET_24 (1*4+3)*16*4 // 112 = 0x70
#define B_OFFSET_31 (2*4+0)*16*4 // 128 = 0x80
#define B_OFFSET_32 (2*4+1)*16*4 // 144 = 0x90
#define B_OFFSET_33 (2*4+2)*16*4 // 160 = 0xa0
#define B_OFFSET_34 (2*4+3)*16*4 // 176 = 0xb0
#define B_OFFSET_41 (3*4+0)*16*4 // 192 = 0xc0
#define B_OFFSET_42 (3*4+1)*16*4 // 208 = 0xd0
#define B_OFFSET_43 (3*4+2)*16*4 // 224 = 0xe0
#define B_OFFSET_44 (3*4+3)*16*4 // 240 = 0xf0

#define C_OFFSET_11 (0*4+0)*16*4 // 0 = 0x0
#define C_OFFSET_12 (0*4+1)*16*4 // 16 = 0x10
#define C_OFFSET_13 (0*4+2)*16*4 // 32 = 0x20
#define C_OFFSET_14 (0*4+3)*16*4 // 48 = 0x30
#define C_OFFSET_21 (1*4+0)*16*4 // 64 = 0x40
#define C_OFFSET_22 (1*4+1)*16*4 // 80 = 0x50
#define C_OFFSET_23 (1*4+2)*16*4 // 96 = 0x60
#define C_OFFSET_24 (1*4+3)*16*4 // 112 = 0x70
#define C_OFFSET_31 (2*4+0)*16*4 // 128 = 0x80
#define C_OFFSET_32 (2*4+1)*16*4 // 144 = 0x90
#define C_OFFSET_33 (2*4+2)*16*4 // 160 = 0xa0
#define C_OFFSET_34 (2*4+3)*16*4 // 176 = 0xb0
#define C_OFFSET_41 (3*4+0)*16*4 // 192 = 0xc0
#define C_OFFSET_42 (3*4+1)*16*4 // 208 = 0xd0
#define C_OFFSET_43 (3*4+2)*16*4 // 224 = 0xe0
#define C_OFFSET_44 (3*4+3)*16*4 // 240 = 0xf0

# C function declaration
#
# struct multiply_stream_t
# {
#   float *A_block;
#   float *B_block;
#   float *C_block;
#   float  norm[32];
# };
#
# void
# stream_kernel_21 (const unsigned int number_stream_elements,
#     float alpha,
#     float tolerance,
#     struct multiply_stream_t *multiply_stream);

  # Function prolog.
  .text
  .align 256
  .global stream_kernel_21
  .type stream_kernel_21, @function

stream_kernel_21:

  # Push used registers on stack.
  push index
  push base_pointer
  push A
  push B
  push C

  # Copy alpha into all 4 elements of SSE register.
  shufps $0x0, alpha, alpha

  # Divide number of stream elements by 64 to simulate stride of 64.
  shr $6, number_stream_elements

  # Test whether number_stream_elements is zero.
  test number_stream_elements, number_stream_elements
  jbe done

  # Set loop index to zero.
  xor base_pointer, base_pointer
  xor index, index

  .align 16
loop:

  # Set the base pointer using sizeof(multiply_stream_t) = 0x98.
  imul $0x98, base_pointer, base_pointer

  # Load pointers to stream matrix blocks.
  mov (multiply_stream, base_pointer, 1), A
  mov 0x8(multiply_stream, base_pointer, 1), B
  mov 0x10(multiply_stream, base_pointer, 1), C

  # Reset C(1,1) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  # Calculate C(1,1) = A(1,1)*B(1,1).
  movaps 0x0+B_OFFSET_11(B), B1
  movaps 0x10+B_OFFSET_11(B), B2
  movaps 0x20+B_OFFSET_11(B), B3
  movaps 0x30+B_OFFSET_11(B), B4
  movaps 0x0+A_OFFSET_11(A), A11
  movaps 0x10+A_OFFSET_11(A), A12
  movaps 0x20+A_OFFSET_11(A), A13
  movaps 0x30+A_OFFSET_11(A), A14
  movaps 0x40+A_OFFSET_11(A), A21
  movaps 0x50+A_OFFSET_11(A), A22
  movaps 0x60+A_OFFSET_11(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_11(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_11(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_11(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_11(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_11(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_11(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_11(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_11(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_11(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(1,1) = A(1,2)*B(2,1).
  movaps 0x0+B_OFFSET_21(B), B1
  movaps 0x10+B_OFFSET_21(B), B2
  movaps 0x20+B_OFFSET_21(B), B3
  movaps 0x30+B_OFFSET_21(B), B4
  movaps 0x0+A_OFFSET_12(A), A11
  movaps 0x10+A_OFFSET_12(A), A12
  movaps 0x20+A_OFFSET_12(A), A13
  movaps 0x30+A_OFFSET_12(A), A14
  movaps 0x40+A_OFFSET_12(A), A21
  movaps 0x50+A_OFFSET_12(A), A22
  movaps 0x60+A_OFFSET_12(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_12(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_12(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_12(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_12(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_12(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_12(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_12(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_12(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_12(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(1,1) = A(1,3)*B(3,1).
  movaps 0x0+B_OFFSET_31(B), B1
  movaps 0x10+B_OFFSET_31(B), B2
  movaps 0x20+B_OFFSET_31(B), B3
  movaps 0x30+B_OFFSET_31(B), B4
  movaps 0x0+A_OFFSET_13(A), A11
  movaps 0x10+A_OFFSET_13(A), A12
  movaps 0x20+A_OFFSET_13(A), A13
  movaps 0x30+A_OFFSET_13(A), A14
  movaps 0x40+A_OFFSET_13(A), A21
  movaps 0x50+A_OFFSET_13(A), A22
  movaps 0x60+A_OFFSET_13(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_13(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_13(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_13(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_13(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_13(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_13(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_13(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_13(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_13(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(1,1) = A(1,4)*B(4,1).
  movaps 0x0+B_OFFSET_41(B), B1
  movaps 0x10+B_OFFSET_41(B), B2
  movaps 0x20+B_OFFSET_41(B), B3
  movaps 0x30+B_OFFSET_41(B), B4
  movaps 0x0+A_OFFSET_14(A), A11
  movaps 0x10+A_OFFSET_14(A), A12
  movaps 0x20+A_OFFSET_14(A), A13
  movaps 0x30+A_OFFSET_14(A), A14
  movaps 0x40+A_OFFSET_14(A), A21
  movaps 0x50+A_OFFSET_14(A), A22
  movaps 0x60+A_OFFSET_14(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_14(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_14(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_14(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_14(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_14(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_14(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_14(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_14(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_14(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Multiply C(1,1) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(1,1) to already existing.
  addps 0x0+C_OFFSET_11(C), C1
  addps 0x10+C_OFFSET_11(C), C2
  addps 0x20+C_OFFSET_11(C), C3
  addps 0x30+C_OFFSET_11(C), C4

  # Write out C(1,1) submatrix block.
  movaps C1, 0x0+C_OFFSET_11(C)
  movaps C2, 0x10+C_OFFSET_11(C)
  movaps C3, 0x20+C_OFFSET_11(C)
  movaps C4, 0x30+C_OFFSET_11(C)

  # Reset C(1,2) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  # Calculate C(1,2) = A(1,1)*B(1,2).
  movaps 0x0+B_OFFSET_12(B), B1
  movaps 0x10+B_OFFSET_12(B), B2
  movaps 0x20+B_OFFSET_12(B), B3
  movaps 0x30+B_OFFSET_12(B), B4
  movaps 0x0+A_OFFSET_11(A), A11
  movaps 0x10+A_OFFSET_11(A), A12
  movaps 0x20+A_OFFSET_11(A), A13
  movaps 0x30+A_OFFSET_11(A), A14
  movaps 0x40+A_OFFSET_11(A), A21
  movaps 0x50+A_OFFSET_11(A), A22
  movaps 0x60+A_OFFSET_11(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_11(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_11(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_11(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_11(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_11(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_11(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_11(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_11(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_11(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(1,2) = A(1,2)*B(2,2).
  movaps 0x0+B_OFFSET_22(B), B1
  movaps 0x10+B_OFFSET_22(B), B2
  movaps 0x20+B_OFFSET_22(B), B3
  movaps 0x30+B_OFFSET_22(B), B4
  movaps 0x0+A_OFFSET_12(A), A11
  movaps 0x10+A_OFFSET_12(A), A12
  movaps 0x20+A_OFFSET_12(A), A13
  movaps 0x30+A_OFFSET_12(A), A14
  movaps 0x40+A_OFFSET_12(A), A21
  movaps 0x50+A_OFFSET_12(A), A22
  movaps 0x60+A_OFFSET_12(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_12(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_12(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_12(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_12(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_12(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_12(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_12(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_12(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_12(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(1,2) = A(1,3)*B(3,2).
  movaps 0x0+B_OFFSET_32(B), B1
  movaps 0x10+B_OFFSET_32(B), B2
  movaps 0x20+B_OFFSET_32(B), B3
  movaps 0x30+B_OFFSET_32(B), B4
  movaps 0x0+A_OFFSET_13(A), A11
  movaps 0x10+A_OFFSET_13(A), A12
  movaps 0x20+A_OFFSET_13(A), A13
  movaps 0x30+A_OFFSET_13(A), A14
  movaps 0x40+A_OFFSET_13(A), A21
  movaps 0x50+A_OFFSET_13(A), A22
  movaps 0x60+A_OFFSET_13(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_13(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_13(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_13(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_13(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_13(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_13(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_13(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_13(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_13(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(1,2) = A(1,4)*B(4,2).
  movaps 0x0+B_OFFSET_42(B), B1
  movaps 0x10+B_OFFSET_42(B), B2
  movaps 0x20+B_OFFSET_42(B), B3
  movaps 0x30+B_OFFSET_42(B), B4
  movaps 0x0+A_OFFSET_14(A), A11
  movaps 0x10+A_OFFSET_14(A), A12
  movaps 0x20+A_OFFSET_14(A), A13
  movaps 0x30+A_OFFSET_14(A), A14
  movaps 0x40+A_OFFSET_14(A), A21
  movaps 0x50+A_OFFSET_14(A), A22
  movaps 0x60+A_OFFSET_14(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_14(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_14(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_14(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_14(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_14(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_14(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_14(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_14(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_14(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Multiply C(1,2) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(1,2) to already existing.
  addps 0x0+C_OFFSET_12(C), C1
  addps 0x10+C_OFFSET_12(C), C2
  addps 0x20+C_OFFSET_12(C), C3
  addps 0x30+C_OFFSET_12(C), C4

  # Write out C(1,2) submatrix block.
  movaps C1, 0x0+C_OFFSET_12(C)
  movaps C2, 0x10+C_OFFSET_12(C)
  movaps C3, 0x20+C_OFFSET_12(C)
  movaps C4, 0x30+C_OFFSET_12(C)

  # Reset C(1,3) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  # Calculate C(1,3) = A(1,1)*B(1,3).
  movaps 0x0+B_OFFSET_13(B), B1
  movaps 0x10+B_OFFSET_13(B), B2
  movaps 0x20+B_OFFSET_13(B), B3
  movaps 0x30+B_OFFSET_13(B), B4
  movaps 0x0+A_OFFSET_11(A), A11
  movaps 0x10+A_OFFSET_11(A), A12
  movaps 0x20+A_OFFSET_11(A), A13
  movaps 0x30+A_OFFSET_11(A), A14
  movaps 0x40+A_OFFSET_11(A), A21
  movaps 0x50+A_OFFSET_11(A), A22
  movaps 0x60+A_OFFSET_11(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_11(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_11(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_11(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_11(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_11(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_11(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_11(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_11(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_11(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(1,3) = A(1,2)*B(2,3).
  movaps 0x0+B_OFFSET_23(B), B1
  movaps 0x10+B_OFFSET_23(B), B2
  movaps 0x20+B_OFFSET_23(B), B3
  movaps 0x30+B_OFFSET_23(B), B4
  movaps 0x0+A_OFFSET_12(A), A11
  movaps 0x10+A_OFFSET_12(A), A12
  movaps 0x20+A_OFFSET_12(A), A13
  movaps 0x30+A_OFFSET_12(A), A14
  movaps 0x40+A_OFFSET_12(A), A21
  movaps 0x50+A_OFFSET_12(A), A22
  movaps 0x60+A_OFFSET_12(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_12(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_12(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_12(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_12(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_12(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_12(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_12(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_12(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_12(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(1,3) = A(1,3)*B(3,3).
  movaps 0x0+B_OFFSET_33(B), B1
  movaps 0x10+B_OFFSET_33(B), B2
  movaps 0x20+B_OFFSET_33(B), B3
  movaps 0x30+B_OFFSET_33(B), B4
  movaps 0x0+A_OFFSET_13(A), A11
  movaps 0x10+A_OFFSET_13(A), A12
  movaps 0x20+A_OFFSET_13(A), A13
  movaps 0x30+A_OFFSET_13(A), A14
  movaps 0x40+A_OFFSET_13(A), A21
  movaps 0x50+A_OFFSET_13(A), A22
  movaps 0x60+A_OFFSET_13(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_13(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_13(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_13(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_13(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_13(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_13(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_13(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_13(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_13(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(1,3) = A(1,4)*B(4,3).
  movaps 0x0+B_OFFSET_43(B), B1
  movaps 0x10+B_OFFSET_43(B), B2
  movaps 0x20+B_OFFSET_43(B), B3
  movaps 0x30+B_OFFSET_43(B), B4
  movaps 0x0+A_OFFSET_14(A), A11
  movaps 0x10+A_OFFSET_14(A), A12
  movaps 0x20+A_OFFSET_14(A), A13
  movaps 0x30+A_OFFSET_14(A), A14
  movaps 0x40+A_OFFSET_14(A), A21
  movaps 0x50+A_OFFSET_14(A), A22
  movaps 0x60+A_OFFSET_14(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_14(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_14(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_14(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_14(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_14(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_14(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_14(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_14(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_14(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Multiply C(1,3) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(1,3) to already existing.
  addps 0x0+C_OFFSET_13(C), C1
  addps 0x10+C_OFFSET_13(C), C2
  addps 0x20+C_OFFSET_13(C), C3
  addps 0x30+C_OFFSET_13(C), C4

  # Write out C(1,3) submatrix block.
  movaps C1, 0x0+C_OFFSET_13(C)
  movaps C2, 0x10+C_OFFSET_13(C)
  movaps C3, 0x20+C_OFFSET_13(C)
  movaps C4, 0x30+C_OFFSET_13(C)

  # Reset C(1,4) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  # Calculate C(1,4) = A(1,1)*B(1,4).
  movaps 0x0+B_OFFSET_14(B), B1
  movaps 0x10+B_OFFSET_14(B), B2
  movaps 0x20+B_OFFSET_14(B), B3
  movaps 0x30+B_OFFSET_14(B), B4
  movaps 0x0+A_OFFSET_11(A), A11
  movaps 0x10+A_OFFSET_11(A), A12
  movaps 0x20+A_OFFSET_11(A), A13
  movaps 0x30+A_OFFSET_11(A), A14
  movaps 0x40+A_OFFSET_11(A), A21
  movaps 0x50+A_OFFSET_11(A), A22
  movaps 0x60+A_OFFSET_11(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_11(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_11(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_11(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_11(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_11(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_11(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_11(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_11(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_11(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(1,4) = A(1,2)*B(2,4).
  movaps 0x0+B_OFFSET_24(B), B1
  movaps 0x10+B_OFFSET_24(B), B2
  movaps 0x20+B_OFFSET_24(B), B3
  movaps 0x30+B_OFFSET_24(B), B4
  movaps 0x0+A_OFFSET_12(A), A11
  movaps 0x10+A_OFFSET_12(A), A12
  movaps 0x20+A_OFFSET_12(A), A13
  movaps 0x30+A_OFFSET_12(A), A14
  movaps 0x40+A_OFFSET_12(A), A21
  movaps 0x50+A_OFFSET_12(A), A22
  movaps 0x60+A_OFFSET_12(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_12(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_12(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_12(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_12(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_12(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_12(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_12(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_12(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_12(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(1,4) = A(1,3)*B(3,4).
  movaps 0x0+B_OFFSET_34(B), B1
  movaps 0x10+B_OFFSET_34(B), B2
  movaps 0x20+B_OFFSET_34(B), B3
  movaps 0x30+B_OFFSET_34(B), B4
  movaps 0x0+A_OFFSET_13(A), A11
  movaps 0x10+A_OFFSET_13(A), A12
  movaps 0x20+A_OFFSET_13(A), A13
  movaps 0x30+A_OFFSET_13(A), A14
  movaps 0x40+A_OFFSET_13(A), A21
  movaps 0x50+A_OFFSET_13(A), A22
  movaps 0x60+A_OFFSET_13(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_13(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_13(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_13(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_13(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_13(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_13(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_13(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_13(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_13(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(1,4) = A(1,4)*B(4,4).
  movaps 0x0+B_OFFSET_44(B), B1
  movaps 0x10+B_OFFSET_44(B), B2
  movaps 0x20+B_OFFSET_44(B), B3
  movaps 0x30+B_OFFSET_44(B), B4
  movaps 0x0+A_OFFSET_14(A), A11
  movaps 0x10+A_OFFSET_14(A), A12
  movaps 0x20+A_OFFSET_14(A), A13
  movaps 0x30+A_OFFSET_14(A), A14
  movaps 0x40+A_OFFSET_14(A), A21
  movaps 0x50+A_OFFSET_14(A), A22
  movaps 0x60+A_OFFSET_14(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_14(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_14(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_14(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_14(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_14(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_14(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_14(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_14(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_14(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Multiply C(1,4) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(1,4) to already existing.
  addps 0x0+C_OFFSET_14(C), C1
  addps 0x10+C_OFFSET_14(C), C2
  addps 0x20+C_OFFSET_14(C), C3
  addps 0x30+C_OFFSET_14(C), C4

  # Write out C(1,4) submatrix block.
  movaps C1, 0x0+C_OFFSET_14(C)
  movaps C2, 0x10+C_OFFSET_14(C)
  movaps C3, 0x20+C_OFFSET_14(C)
  movaps C4, 0x30+C_OFFSET_14(C)

  # Reset C(2,1) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  # Calculate C(2,1) = A(2,1)*B(1,1).
  movaps 0x0+B_OFFSET_11(B), B1
  movaps 0x10+B_OFFSET_11(B), B2
  movaps 0x20+B_OFFSET_11(B), B3
  movaps 0x30+B_OFFSET_11(B), B4
  movaps 0x0+A_OFFSET_21(A), A11
  movaps 0x10+A_OFFSET_21(A), A12
  movaps 0x20+A_OFFSET_21(A), A13
  movaps 0x30+A_OFFSET_21(A), A14
  movaps 0x40+A_OFFSET_21(A), A21
  movaps 0x50+A_OFFSET_21(A), A22
  movaps 0x60+A_OFFSET_21(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_21(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_21(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_21(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_21(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_21(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_21(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_21(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_21(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_21(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(2,1) = A(2,2)*B(2,1).
  movaps 0x0+B_OFFSET_21(B), B1
  movaps 0x10+B_OFFSET_21(B), B2
  movaps 0x20+B_OFFSET_21(B), B3
  movaps 0x30+B_OFFSET_21(B), B4
  movaps 0x0+A_OFFSET_22(A), A11
  movaps 0x10+A_OFFSET_22(A), A12
  movaps 0x20+A_OFFSET_22(A), A13
  movaps 0x30+A_OFFSET_22(A), A14
  movaps 0x40+A_OFFSET_22(A), A21
  movaps 0x50+A_OFFSET_22(A), A22
  movaps 0x60+A_OFFSET_22(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_22(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_22(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_22(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_22(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_22(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_22(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_22(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_22(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_22(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(2,1) = A(2,3)*B(3,1).
  movaps 0x0+B_OFFSET_31(B), B1
  movaps 0x10+B_OFFSET_31(B), B2
  movaps 0x20+B_OFFSET_31(B), B3
  movaps 0x30+B_OFFSET_31(B), B4
  movaps 0x0+A_OFFSET_23(A), A11
  movaps 0x10+A_OFFSET_23(A), A12
  movaps 0x20+A_OFFSET_23(A), A13
  movaps 0x30+A_OFFSET_23(A), A14
  movaps 0x40+A_OFFSET_23(A), A21
  movaps 0x50+A_OFFSET_23(A), A22
  movaps 0x60+A_OFFSET_23(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_23(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_23(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_23(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_23(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_23(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_23(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_23(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_23(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_23(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(2,1) = A(2,4)*B(4,1).
  movaps 0x0+B_OFFSET_41(B), B1
  movaps 0x10+B_OFFSET_41(B), B2
  movaps 0x20+B_OFFSET_41(B), B3
  movaps 0x30+B_OFFSET_41(B), B4
  movaps 0x0+A_OFFSET_24(A), A11
  movaps 0x10+A_OFFSET_24(A), A12
  movaps 0x20+A_OFFSET_24(A), A13
  movaps 0x30+A_OFFSET_24(A), A14
  movaps 0x40+A_OFFSET_24(A), A21
  movaps 0x50+A_OFFSET_24(A), A22
  movaps 0x60+A_OFFSET_24(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_24(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_24(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_24(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_24(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_24(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_24(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_24(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_24(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_24(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Multiply C(2,1) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(2,1) to already existing.
  addps 0x0+C_OFFSET_21(C), C1
  addps 0x10+C_OFFSET_21(C), C2
  addps 0x20+C_OFFSET_21(C), C3
  addps 0x30+C_OFFSET_21(C), C4

  # Write out C(2,1) submatrix block.
  movaps C1, 0x0+C_OFFSET_21(C)
  movaps C2, 0x10+C_OFFSET_21(C)
  movaps C3, 0x20+C_OFFSET_21(C)
  movaps C4, 0x30+C_OFFSET_21(C)

  # Reset C(2,2) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  # Calculate C(2,2) = A(2,1)*B(1,2).
  movaps 0x0+B_OFFSET_12(B), B1
  movaps 0x10+B_OFFSET_12(B), B2
  movaps 0x20+B_OFFSET_12(B), B3
  movaps 0x30+B_OFFSET_12(B), B4
  movaps 0x0+A_OFFSET_21(A), A11
  movaps 0x10+A_OFFSET_21(A), A12
  movaps 0x20+A_OFFSET_21(A), A13
  movaps 0x30+A_OFFSET_21(A), A14
  movaps 0x40+A_OFFSET_21(A), A21
  movaps 0x50+A_OFFSET_21(A), A22
  movaps 0x60+A_OFFSET_21(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_21(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_21(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_21(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_21(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_21(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_21(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_21(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_21(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_21(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(2,2) = A(2,2)*B(2,2).
  movaps 0x0+B_OFFSET_22(B), B1
  movaps 0x10+B_OFFSET_22(B), B2
  movaps 0x20+B_OFFSET_22(B), B3
  movaps 0x30+B_OFFSET_22(B), B4
  movaps 0x0+A_OFFSET_22(A), A11
  movaps 0x10+A_OFFSET_22(A), A12
  movaps 0x20+A_OFFSET_22(A), A13
  movaps 0x30+A_OFFSET_22(A), A14
  movaps 0x40+A_OFFSET_22(A), A21
  movaps 0x50+A_OFFSET_22(A), A22
  movaps 0x60+A_OFFSET_22(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_22(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_22(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_22(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_22(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_22(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_22(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_22(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_22(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_22(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(2,2) = A(2,3)*B(3,2).
  movaps 0x0+B_OFFSET_32(B), B1
  movaps 0x10+B_OFFSET_32(B), B2
  movaps 0x20+B_OFFSET_32(B), B3
  movaps 0x30+B_OFFSET_32(B), B4
  movaps 0x0+A_OFFSET_23(A), A11
  movaps 0x10+A_OFFSET_23(A), A12
  movaps 0x20+A_OFFSET_23(A), A13
  movaps 0x30+A_OFFSET_23(A), A14
  movaps 0x40+A_OFFSET_23(A), A21
  movaps 0x50+A_OFFSET_23(A), A22
  movaps 0x60+A_OFFSET_23(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_23(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_23(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_23(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_23(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_23(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_23(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_23(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_23(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_23(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(2,2) = A(2,4)*B(4,2).
  movaps 0x0+B_OFFSET_42(B), B1
  movaps 0x10+B_OFFSET_42(B), B2
  movaps 0x20+B_OFFSET_42(B), B3
  movaps 0x30+B_OFFSET_42(B), B4
  movaps 0x0+A_OFFSET_24(A), A11
  movaps 0x10+A_OFFSET_24(A), A12
  movaps 0x20+A_OFFSET_24(A), A13
  movaps 0x30+A_OFFSET_24(A), A14
  movaps 0x40+A_OFFSET_24(A), A21
  movaps 0x50+A_OFFSET_24(A), A22
  movaps 0x60+A_OFFSET_24(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_24(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_24(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_24(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_24(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_24(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_24(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_24(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_24(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_24(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Multiply C(2,2) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(2,2) to already existing.
  addps 0x0+C_OFFSET_22(C), C1
  addps 0x10+C_OFFSET_22(C), C2
  addps 0x20+C_OFFSET_22(C), C3
  addps 0x30+C_OFFSET_22(C), C4

  # Write out C(2,2) submatrix block.
  movaps C1, 0x0+C_OFFSET_22(C)
  movaps C2, 0x10+C_OFFSET_22(C)
  movaps C3, 0x20+C_OFFSET_22(C)
  movaps C4, 0x30+C_OFFSET_22(C)

  # Reset C(2,3) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  # Calculate C(2,3) = A(2,1)*B(1,3).
  movaps 0x0+B_OFFSET_13(B), B1
  movaps 0x10+B_OFFSET_13(B), B2
  movaps 0x20+B_OFFSET_13(B), B3
  movaps 0x30+B_OFFSET_13(B), B4
  movaps 0x0+A_OFFSET_21(A), A11
  movaps 0x10+A_OFFSET_21(A), A12
  movaps 0x20+A_OFFSET_21(A), A13
  movaps 0x30+A_OFFSET_21(A), A14
  movaps 0x40+A_OFFSET_21(A), A21
  movaps 0x50+A_OFFSET_21(A), A22
  movaps 0x60+A_OFFSET_21(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_21(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_21(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_21(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_21(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_21(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_21(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_21(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_21(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_21(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(2,3) = A(2,2)*B(2,3).
  movaps 0x0+B_OFFSET_23(B), B1
  movaps 0x10+B_OFFSET_23(B), B2
  movaps 0x20+B_OFFSET_23(B), B3
  movaps 0x30+B_OFFSET_23(B), B4
  movaps 0x0+A_OFFSET_22(A), A11
  movaps 0x10+A_OFFSET_22(A), A12
  movaps 0x20+A_OFFSET_22(A), A13
  movaps 0x30+A_OFFSET_22(A), A14
  movaps 0x40+A_OFFSET_22(A), A21
  movaps 0x50+A_OFFSET_22(A), A22
  movaps 0x60+A_OFFSET_22(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_22(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_22(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_22(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_22(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_22(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_22(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_22(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_22(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_22(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(2,3) = A(2,3)*B(3,3).
  movaps 0x0+B_OFFSET_33(B), B1
  movaps 0x10+B_OFFSET_33(B), B2
  movaps 0x20+B_OFFSET_33(B), B3
  movaps 0x30+B_OFFSET_33(B), B4
  movaps 0x0+A_OFFSET_23(A), A11
  movaps 0x10+A_OFFSET_23(A), A12
  movaps 0x20+A_OFFSET_23(A), A13
  movaps 0x30+A_OFFSET_23(A), A14
  movaps 0x40+A_OFFSET_23(A), A21
  movaps 0x50+A_OFFSET_23(A), A22
  movaps 0x60+A_OFFSET_23(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_23(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_23(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_23(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_23(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_23(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_23(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_23(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_23(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_23(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(2,3) = A(2,4)*B(4,3).
  movaps 0x0+B_OFFSET_43(B), B1
  movaps 0x10+B_OFFSET_43(B), B2
  movaps 0x20+B_OFFSET_43(B), B3
  movaps 0x30+B_OFFSET_43(B), B4
  movaps 0x0+A_OFFSET_24(A), A11
  movaps 0x10+A_OFFSET_24(A), A12
  movaps 0x20+A_OFFSET_24(A), A13
  movaps 0x30+A_OFFSET_24(A), A14
  movaps 0x40+A_OFFSET_24(A), A21
  movaps 0x50+A_OFFSET_24(A), A22
  movaps 0x60+A_OFFSET_24(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_24(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_24(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_24(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_24(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_24(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_24(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_24(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_24(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_24(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Multiply C(2,3) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(2,3) to already existing.
  addps 0x0+C_OFFSET_23(C), C1
  addps 0x10+C_OFFSET_23(C), C2
  addps 0x20+C_OFFSET_23(C), C3
  addps 0x30+C_OFFSET_23(C), C4

  # Write out C(2,3) submatrix block.
  movaps C1, 0x0+C_OFFSET_23(C)
  movaps C2, 0x10+C_OFFSET_23(C)
  movaps C3, 0x20+C_OFFSET_23(C)
  movaps C4, 0x30+C_OFFSET_23(C)

  # Reset C(2,4) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  # Calculate C(2,4) = A(2,1)*B(1,4).
  movaps 0x0+B_OFFSET_14(B), B1
  movaps 0x10+B_OFFSET_14(B), B2
  movaps 0x20+B_OFFSET_14(B), B3
  movaps 0x30+B_OFFSET_14(B), B4
  movaps 0x0+A_OFFSET_21(A), A11
  movaps 0x10+A_OFFSET_21(A), A12
  movaps 0x20+A_OFFSET_21(A), A13
  movaps 0x30+A_OFFSET_21(A), A14
  movaps 0x40+A_OFFSET_21(A), A21
  movaps 0x50+A_OFFSET_21(A), A22
  movaps 0x60+A_OFFSET_21(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_21(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_21(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_21(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_21(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_21(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_21(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_21(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_21(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_21(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(2,4) = A(2,2)*B(2,4).
  movaps 0x0+B_OFFSET_24(B), B1
  movaps 0x10+B_OFFSET_24(B), B2
  movaps 0x20+B_OFFSET_24(B), B3
  movaps 0x30+B_OFFSET_24(B), B4
  movaps 0x0+A_OFFSET_22(A), A11
  movaps 0x10+A_OFFSET_22(A), A12
  movaps 0x20+A_OFFSET_22(A), A13
  movaps 0x30+A_OFFSET_22(A), A14
  movaps 0x40+A_OFFSET_22(A), A21
  movaps 0x50+A_OFFSET_22(A), A22
  movaps 0x60+A_OFFSET_22(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_22(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_22(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_22(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_22(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_22(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_22(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_22(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_22(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_22(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(2,4) = A(2,3)*B(3,4).
  movaps 0x0+B_OFFSET_34(B), B1
  movaps 0x10+B_OFFSET_34(B), B2
  movaps 0x20+B_OFFSET_34(B), B3
  movaps 0x30+B_OFFSET_34(B), B4
  movaps 0x0+A_OFFSET_23(A), A11
  movaps 0x10+A_OFFSET_23(A), A12
  movaps 0x20+A_OFFSET_23(A), A13
  movaps 0x30+A_OFFSET_23(A), A14
  movaps 0x40+A_OFFSET_23(A), A21
  movaps 0x50+A_OFFSET_23(A), A22
  movaps 0x60+A_OFFSET_23(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_23(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_23(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_23(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_23(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_23(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_23(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_23(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_23(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_23(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(2,4) = A(2,4)*B(4,4).
  movaps 0x0+B_OFFSET_44(B), B1
  movaps 0x10+B_OFFSET_44(B), B2
  movaps 0x20+B_OFFSET_44(B), B3
  movaps 0x30+B_OFFSET_44(B), B4
  movaps 0x0+A_OFFSET_24(A), A11
  movaps 0x10+A_OFFSET_24(A), A12
  movaps 0x20+A_OFFSET_24(A), A13
  movaps 0x30+A_OFFSET_24(A), A14
  movaps 0x40+A_OFFSET_24(A), A21
  movaps 0x50+A_OFFSET_24(A), A22
  movaps 0x60+A_OFFSET_24(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_24(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_24(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_24(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_24(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_24(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_24(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_24(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_24(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_24(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Multiply C(2,4) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(2,4) to already existing.
  addps 0x0+C_OFFSET_24(C), C1
  addps 0x10+C_OFFSET_24(C), C2
  addps 0x20+C_OFFSET_24(C), C3
  addps 0x30+C_OFFSET_24(C), C4

  # Write out C(2,4) submatrix block.
  movaps C1, 0x0+C_OFFSET_24(C)
  movaps C2, 0x10+C_OFFSET_24(C)
  movaps C3, 0x20+C_OFFSET_24(C)
  movaps C4, 0x30+C_OFFSET_24(C)

  # Reset C(3,1) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  # Calculate C(3,1) = A(3,1)*B(1,1).
  movaps 0x0+B_OFFSET_11(B), B1
  movaps 0x10+B_OFFSET_11(B), B2
  movaps 0x20+B_OFFSET_11(B), B3
  movaps 0x30+B_OFFSET_11(B), B4
  movaps 0x0+A_OFFSET_31(A), A11
  movaps 0x10+A_OFFSET_31(A), A12
  movaps 0x20+A_OFFSET_31(A), A13
  movaps 0x30+A_OFFSET_31(A), A14
  movaps 0x40+A_OFFSET_31(A), A21
  movaps 0x50+A_OFFSET_31(A), A22
  movaps 0x60+A_OFFSET_31(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_31(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_31(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_31(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_31(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_31(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_31(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_31(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_31(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_31(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(3,1) = A(3,2)*B(2,1).
  movaps 0x0+B_OFFSET_21(B), B1
  movaps 0x10+B_OFFSET_21(B), B2
  movaps 0x20+B_OFFSET_21(B), B3
  movaps 0x30+B_OFFSET_21(B), B4
  movaps 0x0+A_OFFSET_32(A), A11
  movaps 0x10+A_OFFSET_32(A), A12
  movaps 0x20+A_OFFSET_32(A), A13
  movaps 0x30+A_OFFSET_32(A), A14
  movaps 0x40+A_OFFSET_32(A), A21
  movaps 0x50+A_OFFSET_32(A), A22
  movaps 0x60+A_OFFSET_32(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_32(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_32(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_32(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_32(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_32(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_32(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_32(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_32(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_32(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(3,1) = A(3,3)*B(3,1).
  movaps 0x0+B_OFFSET_31(B), B1
  movaps 0x10+B_OFFSET_31(B), B2
  movaps 0x20+B_OFFSET_31(B), B3
  movaps 0x30+B_OFFSET_31(B), B4
  movaps 0x0+A_OFFSET_33(A), A11
  movaps 0x10+A_OFFSET_33(A), A12
  movaps 0x20+A_OFFSET_33(A), A13
  movaps 0x30+A_OFFSET_33(A), A14
  movaps 0x40+A_OFFSET_33(A), A21
  movaps 0x50+A_OFFSET_33(A), A22
  movaps 0x60+A_OFFSET_33(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_33(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_33(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_33(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_33(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_33(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_33(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_33(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_33(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_33(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(3,1) = A(3,4)*B(4,1).
  movaps 0x0+B_OFFSET_41(B), B1
  movaps 0x10+B_OFFSET_41(B), B2
  movaps 0x20+B_OFFSET_41(B), B3
  movaps 0x30+B_OFFSET_41(B), B4
  movaps 0x0+A_OFFSET_34(A), A11
  movaps 0x10+A_OFFSET_34(A), A12
  movaps 0x20+A_OFFSET_34(A), A13
  movaps 0x30+A_OFFSET_34(A), A14
  movaps 0x40+A_OFFSET_34(A), A21
  movaps 0x50+A_OFFSET_34(A), A22
  movaps 0x60+A_OFFSET_34(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_34(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_34(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_34(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_34(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_34(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_34(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_34(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_34(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_34(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Multiply C(3,1) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(3,1) to already existing.
  addps 0x0+C_OFFSET_31(C), C1
  addps 0x10+C_OFFSET_31(C), C2
  addps 0x20+C_OFFSET_31(C), C3
  addps 0x30+C_OFFSET_31(C), C4

  # Write out C(3,1) submatrix block.
  movaps C1, 0x0+C_OFFSET_31(C)
  movaps C2, 0x10+C_OFFSET_31(C)
  movaps C3, 0x20+C_OFFSET_31(C)
  movaps C4, 0x30+C_OFFSET_31(C)

  # Reset C(3,2) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  # Calculate C(3,2) = A(3,1)*B(1,2).
  movaps 0x0+B_OFFSET_12(B), B1
  movaps 0x10+B_OFFSET_12(B), B2
  movaps 0x20+B_OFFSET_12(B), B3
  movaps 0x30+B_OFFSET_12(B), B4
  movaps 0x0+A_OFFSET_31(A), A11
  movaps 0x10+A_OFFSET_31(A), A12
  movaps 0x20+A_OFFSET_31(A), A13
  movaps 0x30+A_OFFSET_31(A), A14
  movaps 0x40+A_OFFSET_31(A), A21
  movaps 0x50+A_OFFSET_31(A), A22
  movaps 0x60+A_OFFSET_31(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_31(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_31(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_31(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_31(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_31(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_31(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_31(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_31(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_31(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(3,2) = A(3,2)*B(2,2).
  movaps 0x0+B_OFFSET_22(B), B1
  movaps 0x10+B_OFFSET_22(B), B2
  movaps 0x20+B_OFFSET_22(B), B3
  movaps 0x30+B_OFFSET_22(B), B4
  movaps 0x0+A_OFFSET_32(A), A11
  movaps 0x10+A_OFFSET_32(A), A12
  movaps 0x20+A_OFFSET_32(A), A13
  movaps 0x30+A_OFFSET_32(A), A14
  movaps 0x40+A_OFFSET_32(A), A21
  movaps 0x50+A_OFFSET_32(A), A22
  movaps 0x60+A_OFFSET_32(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_32(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_32(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_32(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_32(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_32(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_32(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_32(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_32(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_32(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(3,2) = A(3,3)*B(3,2).
  movaps 0x0+B_OFFSET_32(B), B1
  movaps 0x10+B_OFFSET_32(B), B2
  movaps 0x20+B_OFFSET_32(B), B3
  movaps 0x30+B_OFFSET_32(B), B4
  movaps 0x0+A_OFFSET_33(A), A11
  movaps 0x10+A_OFFSET_33(A), A12
  movaps 0x20+A_OFFSET_33(A), A13
  movaps 0x30+A_OFFSET_33(A), A14
  movaps 0x40+A_OFFSET_33(A), A21
  movaps 0x50+A_OFFSET_33(A), A22
  movaps 0x60+A_OFFSET_33(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_33(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_33(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_33(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_33(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_33(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_33(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_33(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_33(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_33(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(3,2) = A(3,4)*B(4,2).
  movaps 0x0+B_OFFSET_42(B), B1
  movaps 0x10+B_OFFSET_42(B), B2
  movaps 0x20+B_OFFSET_42(B), B3
  movaps 0x30+B_OFFSET_42(B), B4
  movaps 0x0+A_OFFSET_34(A), A11
  movaps 0x10+A_OFFSET_34(A), A12
  movaps 0x20+A_OFFSET_34(A), A13
  movaps 0x30+A_OFFSET_34(A), A14
  movaps 0x40+A_OFFSET_34(A), A21
  movaps 0x50+A_OFFSET_34(A), A22
  movaps 0x60+A_OFFSET_34(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_34(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_34(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_34(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_34(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_34(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_34(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_34(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_34(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_34(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Multiply C(3,2) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(3,2) to already existing.
  addps 0x0+C_OFFSET_32(C), C1
  addps 0x10+C_OFFSET_32(C), C2
  addps 0x20+C_OFFSET_32(C), C3
  addps 0x30+C_OFFSET_32(C), C4

  # Write out C(3,2) submatrix block.
  movaps C1, 0x0+C_OFFSET_32(C)
  movaps C2, 0x10+C_OFFSET_32(C)
  movaps C3, 0x20+C_OFFSET_32(C)
  movaps C4, 0x30+C_OFFSET_32(C)

  # Reset C(3,3) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  # Calculate C(3,3) = A(3,1)*B(1,3).
  movaps 0x0+B_OFFSET_13(B), B1
  movaps 0x10+B_OFFSET_13(B), B2
  movaps 0x20+B_OFFSET_13(B), B3
  movaps 0x30+B_OFFSET_13(B), B4
  movaps 0x0+A_OFFSET_31(A), A11
  movaps 0x10+A_OFFSET_31(A), A12
  movaps 0x20+A_OFFSET_31(A), A13
  movaps 0x30+A_OFFSET_31(A), A14
  movaps 0x40+A_OFFSET_31(A), A21
  movaps 0x50+A_OFFSET_31(A), A22
  movaps 0x60+A_OFFSET_31(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_31(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_31(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_31(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_31(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_31(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_31(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_31(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_31(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_31(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(3,3) = A(3,2)*B(2,3).
  movaps 0x0+B_OFFSET_23(B), B1
  movaps 0x10+B_OFFSET_23(B), B2
  movaps 0x20+B_OFFSET_23(B), B3
  movaps 0x30+B_OFFSET_23(B), B4
  movaps 0x0+A_OFFSET_32(A), A11
  movaps 0x10+A_OFFSET_32(A), A12
  movaps 0x20+A_OFFSET_32(A), A13
  movaps 0x30+A_OFFSET_32(A), A14
  movaps 0x40+A_OFFSET_32(A), A21
  movaps 0x50+A_OFFSET_32(A), A22
  movaps 0x60+A_OFFSET_32(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_32(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_32(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_32(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_32(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_32(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_32(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_32(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_32(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_32(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(3,3) = A(3,3)*B(3,3).
  movaps 0x0+B_OFFSET_33(B), B1
  movaps 0x10+B_OFFSET_33(B), B2
  movaps 0x20+B_OFFSET_33(B), B3
  movaps 0x30+B_OFFSET_33(B), B4
  movaps 0x0+A_OFFSET_33(A), A11
  movaps 0x10+A_OFFSET_33(A), A12
  movaps 0x20+A_OFFSET_33(A), A13
  movaps 0x30+A_OFFSET_33(A), A14
  movaps 0x40+A_OFFSET_33(A), A21
  movaps 0x50+A_OFFSET_33(A), A22
  movaps 0x60+A_OFFSET_33(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_33(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_33(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_33(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_33(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_33(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_33(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_33(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_33(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_33(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(3,3) = A(3,4)*B(4,3).
  movaps 0x0+B_OFFSET_43(B), B1
  movaps 0x10+B_OFFSET_43(B), B2
  movaps 0x20+B_OFFSET_43(B), B3
  movaps 0x30+B_OFFSET_43(B), B4
  movaps 0x0+A_OFFSET_34(A), A11
  movaps 0x10+A_OFFSET_34(A), A12
  movaps 0x20+A_OFFSET_34(A), A13
  movaps 0x30+A_OFFSET_34(A), A14
  movaps 0x40+A_OFFSET_34(A), A21
  movaps 0x50+A_OFFSET_34(A), A22
  movaps 0x60+A_OFFSET_34(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_34(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_34(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_34(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_34(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_34(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_34(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_34(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_34(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_34(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Multiply C(3,3) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(3,3) to already existing.
  addps 0x0+C_OFFSET_33(C), C1
  addps 0x10+C_OFFSET_33(C), C2
  addps 0x20+C_OFFSET_33(C), C3
  addps 0x30+C_OFFSET_33(C), C4

  # Write out C(3,3) submatrix block.
  movaps C1, 0x0+C_OFFSET_33(C)
  movaps C2, 0x10+C_OFFSET_33(C)
  movaps C3, 0x20+C_OFFSET_33(C)
  movaps C4, 0x30+C_OFFSET_33(C)

  # Reset C(3,4) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  # Calculate C(3,4) = A(3,1)*B(1,4).
  movaps 0x0+B_OFFSET_14(B), B1
  movaps 0x10+B_OFFSET_14(B), B2
  movaps 0x20+B_OFFSET_14(B), B3
  movaps 0x30+B_OFFSET_14(B), B4
  movaps 0x0+A_OFFSET_31(A), A11
  movaps 0x10+A_OFFSET_31(A), A12
  movaps 0x20+A_OFFSET_31(A), A13
  movaps 0x30+A_OFFSET_31(A), A14
  movaps 0x40+A_OFFSET_31(A), A21
  movaps 0x50+A_OFFSET_31(A), A22
  movaps 0x60+A_OFFSET_31(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_31(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_31(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_31(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_31(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_31(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_31(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_31(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_31(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_31(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(3,4) = A(3,2)*B(2,4).
  movaps 0x0+B_OFFSET_24(B), B1
  movaps 0x10+B_OFFSET_24(B), B2
  movaps 0x20+B_OFFSET_24(B), B3
  movaps 0x30+B_OFFSET_24(B), B4
  movaps 0x0+A_OFFSET_32(A), A11
  movaps 0x10+A_OFFSET_32(A), A12
  movaps 0x20+A_OFFSET_32(A), A13
  movaps 0x30+A_OFFSET_32(A), A14
  movaps 0x40+A_OFFSET_32(A), A21
  movaps 0x50+A_OFFSET_32(A), A22
  movaps 0x60+A_OFFSET_32(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_32(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_32(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_32(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_32(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_32(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_32(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_32(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_32(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_32(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(3,4) = A(3,3)*B(3,4).
  movaps 0x0+B_OFFSET_34(B), B1
  movaps 0x10+B_OFFSET_34(B), B2
  movaps 0x20+B_OFFSET_34(B), B3
  movaps 0x30+B_OFFSET_34(B), B4
  movaps 0x0+A_OFFSET_33(A), A11
  movaps 0x10+A_OFFSET_33(A), A12
  movaps 0x20+A_OFFSET_33(A), A13
  movaps 0x30+A_OFFSET_33(A), A14
  movaps 0x40+A_OFFSET_33(A), A21
  movaps 0x50+A_OFFSET_33(A), A22
  movaps 0x60+A_OFFSET_33(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_33(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_33(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_33(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_33(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_33(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_33(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_33(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_33(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_33(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(3,4) = A(3,4)*B(4,4).
  movaps 0x0+B_OFFSET_44(B), B1
  movaps 0x10+B_OFFSET_44(B), B2
  movaps 0x20+B_OFFSET_44(B), B3
  movaps 0x30+B_OFFSET_44(B), B4
  movaps 0x0+A_OFFSET_34(A), A11
  movaps 0x10+A_OFFSET_34(A), A12
  movaps 0x20+A_OFFSET_34(A), A13
  movaps 0x30+A_OFFSET_34(A), A14
  movaps 0x40+A_OFFSET_34(A), A21
  movaps 0x50+A_OFFSET_34(A), A22
  movaps 0x60+A_OFFSET_34(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_34(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_34(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_34(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_34(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_34(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_34(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_34(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_34(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_34(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Multiply C(3,4) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(3,4) to already existing.
  addps 0x0+C_OFFSET_34(C), C1
  addps 0x10+C_OFFSET_34(C), C2
  addps 0x20+C_OFFSET_34(C), C3
  addps 0x30+C_OFFSET_34(C), C4

  # Write out C(3,4) submatrix block.
  movaps C1, 0x0+C_OFFSET_34(C)
  movaps C2, 0x10+C_OFFSET_34(C)
  movaps C3, 0x20+C_OFFSET_34(C)
  movaps C4, 0x30+C_OFFSET_34(C)

  # Reset C(4,1) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  # Calculate C(4,1) = A(4,1)*B(1,1).
  movaps 0x0+B_OFFSET_11(B), B1
  movaps 0x10+B_OFFSET_11(B), B2
  movaps 0x20+B_OFFSET_11(B), B3
  movaps 0x30+B_OFFSET_11(B), B4
  movaps 0x0+A_OFFSET_41(A), A11
  movaps 0x10+A_OFFSET_41(A), A12
  movaps 0x20+A_OFFSET_41(A), A13
  movaps 0x30+A_OFFSET_41(A), A14
  movaps 0x40+A_OFFSET_41(A), A21
  movaps 0x50+A_OFFSET_41(A), A22
  movaps 0x60+A_OFFSET_41(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_41(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_41(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_41(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_41(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_41(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_41(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_41(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_41(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_41(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(4,1) = A(4,2)*B(2,1).
  movaps 0x0+B_OFFSET_21(B), B1
  movaps 0x10+B_OFFSET_21(B), B2
  movaps 0x20+B_OFFSET_21(B), B3
  movaps 0x30+B_OFFSET_21(B), B4
  movaps 0x0+A_OFFSET_42(A), A11
  movaps 0x10+A_OFFSET_42(A), A12
  movaps 0x20+A_OFFSET_42(A), A13
  movaps 0x30+A_OFFSET_42(A), A14
  movaps 0x40+A_OFFSET_42(A), A21
  movaps 0x50+A_OFFSET_42(A), A22
  movaps 0x60+A_OFFSET_42(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_42(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_42(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_42(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_42(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_42(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_42(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_42(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_42(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_42(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(4,1) = A(4,3)*B(3,1).
  movaps 0x0+B_OFFSET_31(B), B1
  movaps 0x10+B_OFFSET_31(B), B2
  movaps 0x20+B_OFFSET_31(B), B3
  movaps 0x30+B_OFFSET_31(B), B4
  movaps 0x0+A_OFFSET_43(A), A11
  movaps 0x10+A_OFFSET_43(A), A12
  movaps 0x20+A_OFFSET_43(A), A13
  movaps 0x30+A_OFFSET_43(A), A14
  movaps 0x40+A_OFFSET_43(A), A21
  movaps 0x50+A_OFFSET_43(A), A22
  movaps 0x60+A_OFFSET_43(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_43(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_43(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_43(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_43(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_43(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_43(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_43(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_43(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_43(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(4,1) = A(4,4)*B(4,1).
  movaps 0x0+B_OFFSET_41(B), B1
  movaps 0x10+B_OFFSET_41(B), B2
  movaps 0x20+B_OFFSET_41(B), B3
  movaps 0x30+B_OFFSET_41(B), B4
  movaps 0x0+A_OFFSET_44(A), A11
  movaps 0x10+A_OFFSET_44(A), A12
  movaps 0x20+A_OFFSET_44(A), A13
  movaps 0x30+A_OFFSET_44(A), A14
  movaps 0x40+A_OFFSET_44(A), A21
  movaps 0x50+A_OFFSET_44(A), A22
  movaps 0x60+A_OFFSET_44(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_44(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_44(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_44(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_44(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_44(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_44(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_44(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_44(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_44(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Multiply C(4,1) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(4,1) to already existing.
  addps 0x0+C_OFFSET_41(C), C1
  addps 0x10+C_OFFSET_41(C), C2
  addps 0x20+C_OFFSET_41(C), C3
  addps 0x30+C_OFFSET_41(C), C4

  # Write out C(4,1) submatrix block.
  movaps C1, 0x0+C_OFFSET_41(C)
  movaps C2, 0x10+C_OFFSET_41(C)
  movaps C3, 0x20+C_OFFSET_41(C)
  movaps C4, 0x30+C_OFFSET_41(C)

  # Reset C(4,2) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  # Calculate C(4,2) = A(4,1)*B(1,2).
  movaps 0x0+B_OFFSET_12(B), B1
  movaps 0x10+B_OFFSET_12(B), B2
  movaps 0x20+B_OFFSET_12(B), B3
  movaps 0x30+B_OFFSET_12(B), B4
  movaps 0x0+A_OFFSET_41(A), A11
  movaps 0x10+A_OFFSET_41(A), A12
  movaps 0x20+A_OFFSET_41(A), A13
  movaps 0x30+A_OFFSET_41(A), A14
  movaps 0x40+A_OFFSET_41(A), A21
  movaps 0x50+A_OFFSET_41(A), A22
  movaps 0x60+A_OFFSET_41(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_41(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_41(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_41(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_41(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_41(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_41(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_41(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_41(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_41(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(4,2) = A(4,2)*B(2,2).
  movaps 0x0+B_OFFSET_22(B), B1
  movaps 0x10+B_OFFSET_22(B), B2
  movaps 0x20+B_OFFSET_22(B), B3
  movaps 0x30+B_OFFSET_22(B), B4
  movaps 0x0+A_OFFSET_42(A), A11
  movaps 0x10+A_OFFSET_42(A), A12
  movaps 0x20+A_OFFSET_42(A), A13
  movaps 0x30+A_OFFSET_42(A), A14
  movaps 0x40+A_OFFSET_42(A), A21
  movaps 0x50+A_OFFSET_42(A), A22
  movaps 0x60+A_OFFSET_42(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_42(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_42(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_42(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_42(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_42(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_42(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_42(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_42(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_42(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(4,2) = A(4,3)*B(3,2).
  movaps 0x0+B_OFFSET_32(B), B1
  movaps 0x10+B_OFFSET_32(B), B2
  movaps 0x20+B_OFFSET_32(B), B3
  movaps 0x30+B_OFFSET_32(B), B4
  movaps 0x0+A_OFFSET_43(A), A11
  movaps 0x10+A_OFFSET_43(A), A12
  movaps 0x20+A_OFFSET_43(A), A13
  movaps 0x30+A_OFFSET_43(A), A14
  movaps 0x40+A_OFFSET_43(A), A21
  movaps 0x50+A_OFFSET_43(A), A22
  movaps 0x60+A_OFFSET_43(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_43(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_43(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_43(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_43(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_43(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_43(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_43(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_43(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_43(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(4,2) = A(4,4)*B(4,2).
  movaps 0x0+B_OFFSET_42(B), B1
  movaps 0x10+B_OFFSET_42(B), B2
  movaps 0x20+B_OFFSET_42(B), B3
  movaps 0x30+B_OFFSET_42(B), B4
  movaps 0x0+A_OFFSET_44(A), A11
  movaps 0x10+A_OFFSET_44(A), A12
  movaps 0x20+A_OFFSET_44(A), A13
  movaps 0x30+A_OFFSET_44(A), A14
  movaps 0x40+A_OFFSET_44(A), A21
  movaps 0x50+A_OFFSET_44(A), A22
  movaps 0x60+A_OFFSET_44(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_44(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_44(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_44(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_44(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_44(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_44(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_44(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_44(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_44(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Multiply C(4,2) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(4,2) to already existing.
  addps 0x0+C_OFFSET_42(C), C1
  addps 0x10+C_OFFSET_42(C), C2
  addps 0x20+C_OFFSET_42(C), C3
  addps 0x30+C_OFFSET_42(C), C4

  # Write out C(4,2) submatrix block.
  movaps C1, 0x0+C_OFFSET_42(C)
  movaps C2, 0x10+C_OFFSET_42(C)
  movaps C3, 0x20+C_OFFSET_42(C)
  movaps C4, 0x30+C_OFFSET_42(C)

  # Reset C(4,3) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  # Calculate C(4,3) = A(4,1)*B(1,3).
  movaps 0x0+B_OFFSET_13(B), B1
  movaps 0x10+B_OFFSET_13(B), B2
  movaps 0x20+B_OFFSET_13(B), B3
  movaps 0x30+B_OFFSET_13(B), B4
  movaps 0x0+A_OFFSET_41(A), A11
  movaps 0x10+A_OFFSET_41(A), A12
  movaps 0x20+A_OFFSET_41(A), A13
  movaps 0x30+A_OFFSET_41(A), A14
  movaps 0x40+A_OFFSET_41(A), A21
  movaps 0x50+A_OFFSET_41(A), A22
  movaps 0x60+A_OFFSET_41(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_41(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_41(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_41(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_41(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_41(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_41(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_41(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_41(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_41(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(4,3) = A(4,2)*B(2,3).
  movaps 0x0+B_OFFSET_23(B), B1
  movaps 0x10+B_OFFSET_23(B), B2
  movaps 0x20+B_OFFSET_23(B), B3
  movaps 0x30+B_OFFSET_23(B), B4
  movaps 0x0+A_OFFSET_42(A), A11
  movaps 0x10+A_OFFSET_42(A), A12
  movaps 0x20+A_OFFSET_42(A), A13
  movaps 0x30+A_OFFSET_42(A), A14
  movaps 0x40+A_OFFSET_42(A), A21
  movaps 0x50+A_OFFSET_42(A), A22
  movaps 0x60+A_OFFSET_42(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_42(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_42(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_42(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_42(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_42(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_42(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_42(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_42(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_42(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(4,3) = A(4,3)*B(3,3).
  movaps 0x0+B_OFFSET_33(B), B1
  movaps 0x10+B_OFFSET_33(B), B2
  movaps 0x20+B_OFFSET_33(B), B3
  movaps 0x30+B_OFFSET_33(B), B4
  movaps 0x0+A_OFFSET_43(A), A11
  movaps 0x10+A_OFFSET_43(A), A12
  movaps 0x20+A_OFFSET_43(A), A13
  movaps 0x30+A_OFFSET_43(A), A14
  movaps 0x40+A_OFFSET_43(A), A21
  movaps 0x50+A_OFFSET_43(A), A22
  movaps 0x60+A_OFFSET_43(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_43(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_43(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_43(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_43(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_43(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_43(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_43(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_43(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_43(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(4,3) = A(4,4)*B(4,3).
  movaps 0x0+B_OFFSET_43(B), B1
  movaps 0x10+B_OFFSET_43(B), B2
  movaps 0x20+B_OFFSET_43(B), B3
  movaps 0x30+B_OFFSET_43(B), B4
  movaps 0x0+A_OFFSET_44(A), A11
  movaps 0x10+A_OFFSET_44(A), A12
  movaps 0x20+A_OFFSET_44(A), A13
  movaps 0x30+A_OFFSET_44(A), A14
  movaps 0x40+A_OFFSET_44(A), A21
  movaps 0x50+A_OFFSET_44(A), A22
  movaps 0x60+A_OFFSET_44(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_44(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_44(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_44(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_44(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_44(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_44(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_44(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_44(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_44(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Multiply C(4,3) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(4,3) to already existing.
  addps 0x0+C_OFFSET_43(C), C1
  addps 0x10+C_OFFSET_43(C), C2
  addps 0x20+C_OFFSET_43(C), C3
  addps 0x30+C_OFFSET_43(C), C4

  # Write out C(4,3) submatrix block.
  movaps C1, 0x0+C_OFFSET_43(C)
  movaps C2, 0x10+C_OFFSET_43(C)
  movaps C3, 0x20+C_OFFSET_43(C)
  movaps C4, 0x30+C_OFFSET_43(C)

  # Reset C(4,4) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  # Calculate C(4,4) = A(4,1)*B(1,4).
  movaps 0x0+B_OFFSET_14(B), B1
  movaps 0x10+B_OFFSET_14(B), B2
  movaps 0x20+B_OFFSET_14(B), B3
  movaps 0x30+B_OFFSET_14(B), B4
  movaps 0x0+A_OFFSET_41(A), A11
  movaps 0x10+A_OFFSET_41(A), A12
  movaps 0x20+A_OFFSET_41(A), A13
  movaps 0x30+A_OFFSET_41(A), A14
  movaps 0x40+A_OFFSET_41(A), A21
  movaps 0x50+A_OFFSET_41(A), A22
  movaps 0x60+A_OFFSET_41(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_41(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_41(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_41(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_41(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_41(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_41(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_41(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_41(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_41(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(4,4) = A(4,2)*B(2,4).
  movaps 0x0+B_OFFSET_24(B), B1
  movaps 0x10+B_OFFSET_24(B), B2
  movaps 0x20+B_OFFSET_24(B), B3
  movaps 0x30+B_OFFSET_24(B), B4
  movaps 0x0+A_OFFSET_42(A), A11
  movaps 0x10+A_OFFSET_42(A), A12
  movaps 0x20+A_OFFSET_42(A), A13
  movaps 0x30+A_OFFSET_42(A), A14
  movaps 0x40+A_OFFSET_42(A), A21
  movaps 0x50+A_OFFSET_42(A), A22
  movaps 0x60+A_OFFSET_42(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_42(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_42(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_42(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_42(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_42(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_42(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_42(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_42(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_42(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(4,4) = A(4,3)*B(3,4).
  movaps 0x0+B_OFFSET_34(B), B1
  movaps 0x10+B_OFFSET_34(B), B2
  movaps 0x20+B_OFFSET_34(B), B3
  movaps 0x30+B_OFFSET_34(B), B4
  movaps 0x0+A_OFFSET_43(A), A11
  movaps 0x10+A_OFFSET_43(A), A12
  movaps 0x20+A_OFFSET_43(A), A13
  movaps 0x30+A_OFFSET_43(A), A14
  movaps 0x40+A_OFFSET_43(A), A21
  movaps 0x50+A_OFFSET_43(A), A22
  movaps 0x60+A_OFFSET_43(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_43(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_43(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_43(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_43(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_43(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_43(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_43(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_43(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_43(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Calculate C(4,4) = A(4,4)*B(4,4).
  movaps 0x0+B_OFFSET_44(B), B1
  movaps 0x10+B_OFFSET_44(B), B2
  movaps 0x20+B_OFFSET_44(B), B3
  movaps 0x30+B_OFFSET_44(B), B4
  movaps 0x0+A_OFFSET_44(A), A11
  movaps 0x10+A_OFFSET_44(A), A12
  movaps 0x20+A_OFFSET_44(A), A13
  movaps 0x30+A_OFFSET_44(A), A14
  movaps 0x40+A_OFFSET_44(A), A21
  movaps 0x50+A_OFFSET_44(A), A22
  movaps 0x60+A_OFFSET_44(A), A23
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x70+A_OFFSET_44(A), A24
  mulps B3, A13
  addps A12, C1
  movaps 0x80+A_OFFSET_44(A), A31
  mulps B4, A14
  addps A13, C1
  movaps 0x90+A_OFFSET_44(A), A32
  mulps B1, A21
  addps A14, C1
  movaps 0xa0+A_OFFSET_44(A), A33
  mulps B2, A22
  addps A21, C2
  movaps 0xb0+A_OFFSET_44(A), A34
  mulps B3, A23
  addps A22, C2
  movaps 0xc0+A_OFFSET_44(A), A41
  mulps B4, A24
  addps A23, C2
  movaps 0xd0+A_OFFSET_44(A), A42
  mulps B1, A31
  addps A24, C2
  movaps 0xe0+A_OFFSET_44(A), A43
  mulps B2, A32
  addps A31, C3
  movaps 0xf0+A_OFFSET_44(A), A44
  mulps B3, A33
  addps A32, C3
  mulps B4, A34
  addps A33, C3
  mulps B1, A41
  addps A34, C3
  mulps B2, A42
  addps A41, C4
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  # Multiply C(4,4) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(4,4) to already existing.
  addps 0x0+C_OFFSET_44(C), C1
  addps 0x10+C_OFFSET_44(C), C2
  addps 0x20+C_OFFSET_44(C), C3
  addps 0x30+C_OFFSET_44(C), C4

  # Write out C(4,4) submatrix block.
  movaps C1, 0x0+C_OFFSET_44(C)
  movaps C2, 0x10+C_OFFSET_44(C)
  movaps C3, 0x20+C_OFFSET_44(C)
  movaps C4, 0x30+C_OFFSET_44(C)

  # Loop end.
  inc index
  mov index, base_pointer
  cmp number_stream_elements, index
  jb loop

  .align 16
done:

  # Pop registers from stack.
  pop C
  pop B
  pop A
  pop base_pointer
  pop index

  ret

  # Function epilog.
  .size stream_kernel_21, .-stream_kernel_21

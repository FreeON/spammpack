module node
{
  extern module messages;
  array [2D] Node
  {
    entry Node (int N, int depth, int blocksize, int tier);
    entry void init (CkCallback &cb);
    entry [sync] NodeInfoMsg * info (void);
    entry [sync] DenseMatrixMsg * toDense (void);
    entry [sync] SpAMM_Node toSpAMM (void);
    entry void set (int blocksize, double A[blocksize*blocksize], CkCallback &cb);
    entry [threaded] void setNorm (CProxy_Node nodes, CkCallback &cb);
    entry void blockAdd (double alpha, int blocksize,
        double A[blocksize*blocksize]);
    entry [threaded] void add (double alpha, double beta, CProxy_Node B,
        CkCallback &cb);
    entry void trace (CkCallback &cb);
    entry void PEMap (CkCallback &cb);
    entry void scale (double alpha, CkCallback &cb);
    entry void addIdentity (double alpha, CkCallback &cb);
  };
};

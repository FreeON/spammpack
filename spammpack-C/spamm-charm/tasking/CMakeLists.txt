cmake_minimum_required( VERSION 2.8.10 )
project( tasking C )

add_executable( tasking-cpu    tasking-cpu.c )
add_executable( tasking-memory tasking-memory.c )

function( add_link_flags target flags )
  get_target_property( TEMP ${target} LINK_FLAGS )
  if( TEMP )
    list( APPEND TEMP ${flags} )
  else()
    set( TEMP ${flags} )
  endif()
  string( REPLACE ";" " " TEMP "${TEMP}" )
  set_target_properties( ${target} PROPERTIES LINK_FLAGS ${TEMP} )
endfunction()

function( add_compile_flags target flags )
  get_target_property( TEMP ${target} COMPILE_FLAGS )
  if( TEMP )
    list( APPEND TEMP ${flags} )
  else()
    set( TEMP ${flags} )
  endif()
  string( REPLACE ";" " " TEMP "${TEMP}" )
  set_target_properties( ${target} PROPERTIES COMPILE_FLAGS ${TEMP} )
endfunction()

function( add_compile_definitions target defs )
  get_target_property( TEMP ${target} COMPILE_DEFINITIONS )
  if( TEMP )
    list( APPEND TEMP ${defs} )
  else()
    set( TEMP ${defs} )
  endif()
  set_target_properties( ${target} PROPERTIES COMPILE_DEFINITIONS "${TEMP}" )
endfunction()

message( STATUS "Found C compiler ${CMAKE_C_COMPILER_ID}" )
if( CMAKE_C_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "Intel" )
  add_compile_flags( tasking-cpu    "-std=c99" )
  add_compile_flags( tasking-memory "-std=c99" )
endif()

set( TASKING TRUE CACHE BOOL "Whether to task or to loop" )
if( TASKING )
  add_compile_definitions( tasking-cpu "TASKING" )
endif()

set( OPENMP TRUE CACHE BOOL "Whether to compile using OpenMP" )
if( OPENMP )
  include( FindOpenMP )
  if( OPENMP_FOUND )
    message( STATUS "OpenMP_C_FLAGS = ${OpenMP_C_FLAGS}" )
    add_link_flags( tasking-cpu    ${OpenMP_C_FLAGS} )
    add_link_flags( tasking-memory ${OpenMP_C_FLAGS} )
    add_compile_flags( tasking-cpu    ${OpenMP_C_FLAGS} )
    add_compile_flags( tasking-memory ${OpenMP_C_FLAGS} )
  endif()
endif()

add_compile_definitions( tasking-cpu    "_POSIX_C_SOURCE=199309L" )
add_compile_definitions( tasking-memory "_POSIX_C_SOURCE=199309L" )

target_link_libraries( tasking-cpu    "-lrt" )
target_link_libraries( tasking-memory "-lrt" )

set( INTEL_TASK_API FALSE CACHE BOOL "Use Intel VTune task API" )
if( INTEL_TASK_API )
  add_compile_definitions( tasking-memory "INTEL_TASK_API" )
  include_directories( "/opt/intel/vtune_amplifier_xe/include" )
  target_link_libraries( tasking-memory "/opt/intel/vtune_amplifier_xe/lib64/libittnotify.a" )
endif()

cmake_minimum_required( VERSION 2.8 )
project( tasking C )

add_executable( tasking-cpu    tasking-cpu.c )
add_executable( tasking-memory tasking-memory.c )

message( STATUS "Found C compiler ${CMAKE_C_COMPILER_ID}" )
if( CMAKE_C_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "Intel" )
  target_compile_options( tasking-cpu    PUBLIC "-std=c99" )
  target_compile_options( tasking-memory PUBLIC "-std=c99" )
endif()

set( TASKING TRUE CACHE BOOL "Whether to task or to loop" )
if( TASKING )
  target_compile_definitions( tasking-cpu PUBLIC "TASKING" )
endif()

set( OPENMP TRUE CACHE BOOL "Whether to compile using OpenMP" )
if( OPENMP )
  include( FindOpenMP )
  if( OPENMP_FOUND )
    set_target_properties( tasking-cpu    PROPERTIES LINK_FLAGS ${OpenMP_C_FLAGS} )
    set_target_properties( tasking-memory PROPERTIES LINK_FLAGS ${OpenMP_C_FLAGS} )
    target_compile_options( tasking-cpu    PUBLIC ${OpenMP_C_FLAGS} )
    target_compile_options( tasking-memory PUBLIC ${OpenMP_C_FLAGS} )
  endif()
endif()

target_compile_definitions( tasking-cpu    PUBLIC "_POSIX_C_SOURCE=199309L" )
target_compile_definitions( tasking-memory PUBLIC "_POSIX_C_SOURCE=199309L" )

target_link_libraries( tasking-cpu    "-lrt" )
target_link_libraries( tasking-memory "-lrt" )

set( INTEL_TASK_API FALSE CACHE BOOL "Use Intel VTune task API" )
if( INTEL_TASK_API )
  target_compile_definitions( tasking-memory PUBLIC "INTEL_TASK_API" )
  include_directories( "/opt/intel/vtune_amplifier_xe/include" )
  target_link_libraries( tasking-memory "/opt/intel/vtune_amplifier_xe/lib64/libittnotify.a" )
endif()

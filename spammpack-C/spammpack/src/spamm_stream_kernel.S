# This code was auto-generated by generate_SSE_assembly.py.
#
# The command line was:
#
# generate_SSE_assembly.py -N 4 --stripe 4 --name spamm_stream_kernel
#
# Code for a kernel matrix of 4x4 basic matrix blocks.
# Loops fully unrolled for a matrix of 4x4 basic matrix blocks.

# C API (as defined in spamm_kernel.h):
#
# struct spamm_multiply_stream_t
# {
#   struct spamm_data_t *A;
#   struct spamm_data_t *B;
#   struct spamm_data_t *C;
# };
#
# void
# spamm_stream_kernel (const unsigned int number_stream_elements,
#     float alpha,
#     float tolerance,
#     struct multiply_stream_t *multiply_stream);
#
# End of C API.

# The matrix elements in the kernel block are layed out in the following order.
# The basic matrix blocks are of size 4x4 to be able to take advantage fully of
# single precision SSE instructions. Within the 4x4 blocks, the matrix elements
# are layed out in row-major order. The blocks are themselves ordered in
# row-major order within the kernel block.

# Function ABI.
#define number_stream_elements %rdi
#define alpha                  %xmm0
#define tolerance              %xmm1
#define multiply_stream        %rsi

# Define SSE registers used for C matrix
#define C1 %xmm2
#define C2 %xmm3
#define C3 %xmm4
#define C4 %xmm5

# Define SSE registeres used for B matrix
#define B1 %xmm6
#define B2 %xmm7
#define B3 %xmm8
#define B4 %xmm9

# Define SSE registeres used for A matrix
#define A11 %xmm10
#define A12 %xmm11
#define A13 %xmm12
#define A14 %xmm13
#define A21 %xmm14
#define A22 %xmm15
#define A23 %xmm10
#define A24 %xmm11
#define A31 %xmm12
#define A32 %xmm13
#define A33 %xmm14
#define A34 %xmm15
#define A41 %xmm10
#define A42 %xmm11
#define A43 %xmm12
#define A44 %xmm13

# Define loop variables.
#define index        %rax
#define base_pointer %rdx

# Define pointers to matrix data nodes in stream.
#define A %r8
#define B %r9
#define C %r10

# Define stream element size.
#define SIZEOF_MULTIPLY_STREAM_T 0x18

# Define offsets into stream.
#define OFFSET_NORM 0x10
#define OFFSET_BLOCK_DENSE 0xc0
#define OFFSET_BLOCK_DENSE_DILATED 0x4c0

# Define offsets into A matrix.
#define A_OFFSET_11  0*64*4+OFFSET_BLOCK_DENSE_DILATED // 1216 = 0x4c0
#define A_OFFSET_12  1*64*4+OFFSET_BLOCK_DENSE_DILATED // 1472 = 0x5c0
#define A_OFFSET_13  2*64*4+OFFSET_BLOCK_DENSE_DILATED // 1728 = 0x6c0
#define A_OFFSET_14  3*64*4+OFFSET_BLOCK_DENSE_DILATED // 1984 = 0x7c0
#define A_OFFSET_21  4*64*4+OFFSET_BLOCK_DENSE_DILATED // 2240 = 0x8c0
#define A_OFFSET_22  5*64*4+OFFSET_BLOCK_DENSE_DILATED // 2496 = 0x9c0
#define A_OFFSET_23  6*64*4+OFFSET_BLOCK_DENSE_DILATED // 2752 = 0xac0
#define A_OFFSET_24  7*64*4+OFFSET_BLOCK_DENSE_DILATED // 3008 = 0xbc0
#define A_OFFSET_31  8*64*4+OFFSET_BLOCK_DENSE_DILATED // 3264 = 0xcc0
#define A_OFFSET_32  9*64*4+OFFSET_BLOCK_DENSE_DILATED // 3520 = 0xdc0
#define A_OFFSET_33 10*64*4+OFFSET_BLOCK_DENSE_DILATED // 3776 = 0xec0
#define A_OFFSET_34 11*64*4+OFFSET_BLOCK_DENSE_DILATED // 4032 = 0xfc0
#define A_OFFSET_41 12*64*4+OFFSET_BLOCK_DENSE_DILATED // 4288 = 0x10c0
#define A_OFFSET_42 13*64*4+OFFSET_BLOCK_DENSE_DILATED // 4544 = 0x11c0
#define A_OFFSET_43 14*64*4+OFFSET_BLOCK_DENSE_DILATED // 4800 = 0x12c0
#define A_OFFSET_44 15*64*4+OFFSET_BLOCK_DENSE_DILATED // 5056 = 0x13c0

# Define offsets into B matrix.
#define B_OFFSET_11  0*16*4+OFFSET_BLOCK_DENSE // 192 = 0xc0
#define B_OFFSET_12  1*16*4+OFFSET_BLOCK_DENSE // 256 = 0x100
#define B_OFFSET_13  2*16*4+OFFSET_BLOCK_DENSE // 320 = 0x140
#define B_OFFSET_14  3*16*4+OFFSET_BLOCK_DENSE // 384 = 0x180
#define B_OFFSET_21  4*16*4+OFFSET_BLOCK_DENSE // 448 = 0x1c0
#define B_OFFSET_22  5*16*4+OFFSET_BLOCK_DENSE // 512 = 0x200
#define B_OFFSET_23  6*16*4+OFFSET_BLOCK_DENSE // 576 = 0x240
#define B_OFFSET_24  7*16*4+OFFSET_BLOCK_DENSE // 640 = 0x280
#define B_OFFSET_31  8*16*4+OFFSET_BLOCK_DENSE // 704 = 0x2c0
#define B_OFFSET_32  9*16*4+OFFSET_BLOCK_DENSE // 768 = 0x300
#define B_OFFSET_33 10*16*4+OFFSET_BLOCK_DENSE // 832 = 0x340
#define B_OFFSET_34 11*16*4+OFFSET_BLOCK_DENSE // 896 = 0x380
#define B_OFFSET_41 12*16*4+OFFSET_BLOCK_DENSE // 960 = 0x3c0
#define B_OFFSET_42 13*16*4+OFFSET_BLOCK_DENSE // 1024 = 0x400
#define B_OFFSET_43 14*16*4+OFFSET_BLOCK_DENSE // 1088 = 0x440
#define B_OFFSET_44 15*16*4+OFFSET_BLOCK_DENSE // 1152 = 0x480

# Define offsets into C matrix.
#define C_OFFSET_11  0*16*4+OFFSET_BLOCK_DENSE // 192 = 0xc0
#define C_OFFSET_12  1*16*4+OFFSET_BLOCK_DENSE // 256 = 0x100
#define C_OFFSET_13  2*16*4+OFFSET_BLOCK_DENSE // 320 = 0x140
#define C_OFFSET_14  3*16*4+OFFSET_BLOCK_DENSE // 384 = 0x180
#define C_OFFSET_21  4*16*4+OFFSET_BLOCK_DENSE // 448 = 0x1c0
#define C_OFFSET_22  5*16*4+OFFSET_BLOCK_DENSE // 512 = 0x200
#define C_OFFSET_23  6*16*4+OFFSET_BLOCK_DENSE // 576 = 0x240
#define C_OFFSET_24  7*16*4+OFFSET_BLOCK_DENSE // 640 = 0x280
#define C_OFFSET_31  8*16*4+OFFSET_BLOCK_DENSE // 704 = 0x2c0
#define C_OFFSET_32  9*16*4+OFFSET_BLOCK_DENSE // 768 = 0x300
#define C_OFFSET_33 10*16*4+OFFSET_BLOCK_DENSE // 832 = 0x340
#define C_OFFSET_34 11*16*4+OFFSET_BLOCK_DENSE // 896 = 0x380
#define C_OFFSET_41 12*16*4+OFFSET_BLOCK_DENSE // 960 = 0x3c0
#define C_OFFSET_42 13*16*4+OFFSET_BLOCK_DENSE // 1024 = 0x400
#define C_OFFSET_43 14*16*4+OFFSET_BLOCK_DENSE // 1088 = 0x440
#define C_OFFSET_44 15*16*4+OFFSET_BLOCK_DENSE // 1152 = 0x480

  # Function prolog.
  .text
  .align 256
  .global spamm_stream_kernel
  .type spamm_stream_kernel, @function

spamm_stream_kernel:

  # Push used registers on stack.
  push index
  push base_pointer
  push A
  push B
  push C

  # Copy alpha into all 4 elements of SSE register.
  shufps $0x0, alpha, alpha

  # Test whether number_stream_elements is zero.
  test number_stream_elements, number_stream_elements
  jbe stream_done

  # Set loop index to zero.
  xor base_pointer, base_pointer
  xor index, index

  .align 16
stream_loop:

  # Set the base pointer using sizeof(multiply_stream_t) = 24 (0x18).
  imul $SIZEOF_MULTIPLY_STREAM_T, base_pointer, base_pointer

  # Load pointers to stream matrix blocks.
  mov (multiply_stream, base_pointer, 1), A
  mov 0x8(multiply_stream, base_pointer, 1), B
  mov 0x10(multiply_stream, base_pointer, 1), C

  # Adjust offset into matrix.

  # Reset C(1,1) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  .align 16
jump_1:

  # Check norm of product ||A(1,1)||*||B(1,1)||.
  movss 0x0+OFFSET_NORM(A), B1
  mulss 0x0+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_2

  # Calculate C(1,1) += A(1,1)*B(1,1).
  movaps 0x0+B_OFFSET_11(B), B1
  movaps 0x10+B_OFFSET_11(B), B2
  movaps 0x20+B_OFFSET_11(B), B3
  movaps 0x30+B_OFFSET_11(B), B4
  movaps 0x0+A_OFFSET_11(A), A11
  movaps 0x10+A_OFFSET_11(A), A12
  movaps 0x20+A_OFFSET_11(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_11(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_11(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_11(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_11(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_11(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_11(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_11(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_11(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_11(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_11(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_11(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_11(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_11(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_2:

  # Check norm of product ||A(1,2)||*||B(2,1)||.
  movss 0x4+OFFSET_NORM(A), B1
  mulss 0x10+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_3

  # Calculate C(1,1) += A(1,2)*B(2,1).
  movaps 0x0+B_OFFSET_21(B), B1
  movaps 0x10+B_OFFSET_21(B), B2
  movaps 0x20+B_OFFSET_21(B), B3
  movaps 0x30+B_OFFSET_21(B), B4
  movaps 0x0+A_OFFSET_12(A), A11
  movaps 0x10+A_OFFSET_12(A), A12
  movaps 0x20+A_OFFSET_12(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_12(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_12(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_12(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_12(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_12(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_12(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_12(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_12(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_12(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_12(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_12(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_12(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_12(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_3:

  # Check norm of product ||A(1,3)||*||B(3,1)||.
  movss 0x8+OFFSET_NORM(A), B1
  mulss 0x20+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_4

  # Calculate C(1,1) += A(1,3)*B(3,1).
  movaps 0x0+B_OFFSET_31(B), B1
  movaps 0x10+B_OFFSET_31(B), B2
  movaps 0x20+B_OFFSET_31(B), B3
  movaps 0x30+B_OFFSET_31(B), B4
  movaps 0x0+A_OFFSET_13(A), A11
  movaps 0x10+A_OFFSET_13(A), A12
  movaps 0x20+A_OFFSET_13(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_13(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_13(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_13(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_13(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_13(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_13(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_13(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_13(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_13(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_13(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_13(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_13(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_13(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_4:

  # Check norm of product ||A(1,4)||*||B(4,1)||.
  movss 0xc+OFFSET_NORM(A), B1
  mulss 0x30+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_5

  # Calculate C(1,1) += A(1,4)*B(4,1).
  movaps 0x0+B_OFFSET_41(B), B1
  movaps 0x10+B_OFFSET_41(B), B2
  movaps 0x20+B_OFFSET_41(B), B3
  movaps 0x30+B_OFFSET_41(B), B4
  movaps 0x0+A_OFFSET_14(A), A11
  movaps 0x10+A_OFFSET_14(A), A12
  movaps 0x20+A_OFFSET_14(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_14(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_14(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_14(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_14(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_14(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_14(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_14(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_14(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_14(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_14(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_14(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_14(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_14(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_5:

  # Multiply C(1,1) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(1,1) to already existing.
  addps 0x0+C_OFFSET_11(C), C1
  addps 0x10+C_OFFSET_11(C), C2
  addps 0x20+C_OFFSET_11(C), C3
  addps 0x30+C_OFFSET_11(C), C4

  # Write out C(1,1) submatrix block.
  movaps C1, 0x0+C_OFFSET_11(C)
  movaps C2, 0x10+C_OFFSET_11(C)
  movaps C3, 0x20+C_OFFSET_11(C)
  movaps C4, 0x30+C_OFFSET_11(C)

  # Reset C(1,2) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  .align 16
jump_6:

  # Check norm of product ||A(1,1)||*||B(1,2)||.
  movss 0x0+OFFSET_NORM(A), B1
  mulss 0x4+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_7

  # Calculate C(1,2) += A(1,1)*B(1,2).
  movaps 0x0+B_OFFSET_12(B), B1
  movaps 0x10+B_OFFSET_12(B), B2
  movaps 0x20+B_OFFSET_12(B), B3
  movaps 0x30+B_OFFSET_12(B), B4
  movaps 0x0+A_OFFSET_11(A), A11
  movaps 0x10+A_OFFSET_11(A), A12
  movaps 0x20+A_OFFSET_11(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_11(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_11(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_11(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_11(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_11(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_11(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_11(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_11(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_11(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_11(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_11(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_11(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_11(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_7:

  # Check norm of product ||A(1,2)||*||B(2,2)||.
  movss 0x4+OFFSET_NORM(A), B1
  mulss 0x14+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_8

  # Calculate C(1,2) += A(1,2)*B(2,2).
  movaps 0x0+B_OFFSET_22(B), B1
  movaps 0x10+B_OFFSET_22(B), B2
  movaps 0x20+B_OFFSET_22(B), B3
  movaps 0x30+B_OFFSET_22(B), B4
  movaps 0x0+A_OFFSET_12(A), A11
  movaps 0x10+A_OFFSET_12(A), A12
  movaps 0x20+A_OFFSET_12(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_12(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_12(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_12(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_12(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_12(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_12(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_12(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_12(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_12(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_12(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_12(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_12(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_12(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_8:

  # Check norm of product ||A(1,3)||*||B(3,2)||.
  movss 0x8+OFFSET_NORM(A), B1
  mulss 0x24+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_9

  # Calculate C(1,2) += A(1,3)*B(3,2).
  movaps 0x0+B_OFFSET_32(B), B1
  movaps 0x10+B_OFFSET_32(B), B2
  movaps 0x20+B_OFFSET_32(B), B3
  movaps 0x30+B_OFFSET_32(B), B4
  movaps 0x0+A_OFFSET_13(A), A11
  movaps 0x10+A_OFFSET_13(A), A12
  movaps 0x20+A_OFFSET_13(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_13(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_13(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_13(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_13(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_13(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_13(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_13(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_13(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_13(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_13(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_13(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_13(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_13(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_9:

  # Check norm of product ||A(1,4)||*||B(4,2)||.
  movss 0xc+OFFSET_NORM(A), B1
  mulss 0x34+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_10

  # Calculate C(1,2) += A(1,4)*B(4,2).
  movaps 0x0+B_OFFSET_42(B), B1
  movaps 0x10+B_OFFSET_42(B), B2
  movaps 0x20+B_OFFSET_42(B), B3
  movaps 0x30+B_OFFSET_42(B), B4
  movaps 0x0+A_OFFSET_14(A), A11
  movaps 0x10+A_OFFSET_14(A), A12
  movaps 0x20+A_OFFSET_14(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_14(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_14(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_14(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_14(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_14(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_14(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_14(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_14(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_14(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_14(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_14(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_14(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_14(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_10:

  # Multiply C(1,2) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(1,2) to already existing.
  addps 0x0+C_OFFSET_12(C), C1
  addps 0x10+C_OFFSET_12(C), C2
  addps 0x20+C_OFFSET_12(C), C3
  addps 0x30+C_OFFSET_12(C), C4

  # Write out C(1,2) submatrix block.
  movaps C1, 0x0+C_OFFSET_12(C)
  movaps C2, 0x10+C_OFFSET_12(C)
  movaps C3, 0x20+C_OFFSET_12(C)
  movaps C4, 0x30+C_OFFSET_12(C)

  # Reset C(1,3) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  .align 16
jump_11:

  # Check norm of product ||A(1,1)||*||B(1,3)||.
  movss 0x0+OFFSET_NORM(A), B1
  mulss 0x8+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_12

  # Calculate C(1,3) += A(1,1)*B(1,3).
  movaps 0x0+B_OFFSET_13(B), B1
  movaps 0x10+B_OFFSET_13(B), B2
  movaps 0x20+B_OFFSET_13(B), B3
  movaps 0x30+B_OFFSET_13(B), B4
  movaps 0x0+A_OFFSET_11(A), A11
  movaps 0x10+A_OFFSET_11(A), A12
  movaps 0x20+A_OFFSET_11(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_11(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_11(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_11(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_11(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_11(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_11(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_11(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_11(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_11(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_11(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_11(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_11(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_11(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_12:

  # Check norm of product ||A(1,2)||*||B(2,3)||.
  movss 0x4+OFFSET_NORM(A), B1
  mulss 0x18+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_13

  # Calculate C(1,3) += A(1,2)*B(2,3).
  movaps 0x0+B_OFFSET_23(B), B1
  movaps 0x10+B_OFFSET_23(B), B2
  movaps 0x20+B_OFFSET_23(B), B3
  movaps 0x30+B_OFFSET_23(B), B4
  movaps 0x0+A_OFFSET_12(A), A11
  movaps 0x10+A_OFFSET_12(A), A12
  movaps 0x20+A_OFFSET_12(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_12(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_12(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_12(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_12(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_12(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_12(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_12(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_12(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_12(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_12(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_12(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_12(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_12(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_13:

  # Check norm of product ||A(1,3)||*||B(3,3)||.
  movss 0x8+OFFSET_NORM(A), B1
  mulss 0x28+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_14

  # Calculate C(1,3) += A(1,3)*B(3,3).
  movaps 0x0+B_OFFSET_33(B), B1
  movaps 0x10+B_OFFSET_33(B), B2
  movaps 0x20+B_OFFSET_33(B), B3
  movaps 0x30+B_OFFSET_33(B), B4
  movaps 0x0+A_OFFSET_13(A), A11
  movaps 0x10+A_OFFSET_13(A), A12
  movaps 0x20+A_OFFSET_13(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_13(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_13(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_13(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_13(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_13(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_13(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_13(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_13(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_13(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_13(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_13(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_13(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_13(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_14:

  # Check norm of product ||A(1,4)||*||B(4,3)||.
  movss 0xc+OFFSET_NORM(A), B1
  mulss 0x38+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_15

  # Calculate C(1,3) += A(1,4)*B(4,3).
  movaps 0x0+B_OFFSET_43(B), B1
  movaps 0x10+B_OFFSET_43(B), B2
  movaps 0x20+B_OFFSET_43(B), B3
  movaps 0x30+B_OFFSET_43(B), B4
  movaps 0x0+A_OFFSET_14(A), A11
  movaps 0x10+A_OFFSET_14(A), A12
  movaps 0x20+A_OFFSET_14(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_14(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_14(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_14(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_14(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_14(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_14(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_14(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_14(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_14(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_14(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_14(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_14(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_14(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_15:

  # Multiply C(1,3) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(1,3) to already existing.
  addps 0x0+C_OFFSET_13(C), C1
  addps 0x10+C_OFFSET_13(C), C2
  addps 0x20+C_OFFSET_13(C), C3
  addps 0x30+C_OFFSET_13(C), C4

  # Write out C(1,3) submatrix block.
  movaps C1, 0x0+C_OFFSET_13(C)
  movaps C2, 0x10+C_OFFSET_13(C)
  movaps C3, 0x20+C_OFFSET_13(C)
  movaps C4, 0x30+C_OFFSET_13(C)

  # Reset C(1,4) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  .align 16
jump_16:

  # Check norm of product ||A(1,1)||*||B(1,4)||.
  movss 0x0+OFFSET_NORM(A), B1
  mulss 0xc+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_17

  # Calculate C(1,4) += A(1,1)*B(1,4).
  movaps 0x0+B_OFFSET_14(B), B1
  movaps 0x10+B_OFFSET_14(B), B2
  movaps 0x20+B_OFFSET_14(B), B3
  movaps 0x30+B_OFFSET_14(B), B4
  movaps 0x0+A_OFFSET_11(A), A11
  movaps 0x10+A_OFFSET_11(A), A12
  movaps 0x20+A_OFFSET_11(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_11(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_11(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_11(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_11(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_11(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_11(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_11(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_11(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_11(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_11(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_11(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_11(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_11(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_17:

  # Check norm of product ||A(1,2)||*||B(2,4)||.
  movss 0x4+OFFSET_NORM(A), B1
  mulss 0x1c+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_18

  # Calculate C(1,4) += A(1,2)*B(2,4).
  movaps 0x0+B_OFFSET_24(B), B1
  movaps 0x10+B_OFFSET_24(B), B2
  movaps 0x20+B_OFFSET_24(B), B3
  movaps 0x30+B_OFFSET_24(B), B4
  movaps 0x0+A_OFFSET_12(A), A11
  movaps 0x10+A_OFFSET_12(A), A12
  movaps 0x20+A_OFFSET_12(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_12(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_12(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_12(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_12(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_12(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_12(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_12(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_12(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_12(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_12(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_12(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_12(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_12(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_18:

  # Check norm of product ||A(1,3)||*||B(3,4)||.
  movss 0x8+OFFSET_NORM(A), B1
  mulss 0x2c+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_19

  # Calculate C(1,4) += A(1,3)*B(3,4).
  movaps 0x0+B_OFFSET_34(B), B1
  movaps 0x10+B_OFFSET_34(B), B2
  movaps 0x20+B_OFFSET_34(B), B3
  movaps 0x30+B_OFFSET_34(B), B4
  movaps 0x0+A_OFFSET_13(A), A11
  movaps 0x10+A_OFFSET_13(A), A12
  movaps 0x20+A_OFFSET_13(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_13(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_13(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_13(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_13(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_13(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_13(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_13(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_13(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_13(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_13(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_13(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_13(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_13(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_19:

  # Check norm of product ||A(1,4)||*||B(4,4)||.
  movss 0xc+OFFSET_NORM(A), B1
  mulss 0x3c+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_20

  # Calculate C(1,4) += A(1,4)*B(4,4).
  movaps 0x0+B_OFFSET_44(B), B1
  movaps 0x10+B_OFFSET_44(B), B2
  movaps 0x20+B_OFFSET_44(B), B3
  movaps 0x30+B_OFFSET_44(B), B4
  movaps 0x0+A_OFFSET_14(A), A11
  movaps 0x10+A_OFFSET_14(A), A12
  movaps 0x20+A_OFFSET_14(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_14(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_14(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_14(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_14(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_14(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_14(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_14(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_14(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_14(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_14(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_14(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_14(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_14(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_20:

  # Multiply C(1,4) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(1,4) to already existing.
  addps 0x0+C_OFFSET_14(C), C1
  addps 0x10+C_OFFSET_14(C), C2
  addps 0x20+C_OFFSET_14(C), C3
  addps 0x30+C_OFFSET_14(C), C4

  # Write out C(1,4) submatrix block.
  movaps C1, 0x0+C_OFFSET_14(C)
  movaps C2, 0x10+C_OFFSET_14(C)
  movaps C3, 0x20+C_OFFSET_14(C)
  movaps C4, 0x30+C_OFFSET_14(C)

  # Reset C(2,1) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  .align 16
jump_21:

  # Check norm of product ||A(2,1)||*||B(1,1)||.
  movss 0x10+OFFSET_NORM(A), B1
  mulss 0x0+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_22

  # Calculate C(2,1) += A(2,1)*B(1,1).
  movaps 0x0+B_OFFSET_11(B), B1
  movaps 0x10+B_OFFSET_11(B), B2
  movaps 0x20+B_OFFSET_11(B), B3
  movaps 0x30+B_OFFSET_11(B), B4
  movaps 0x0+A_OFFSET_21(A), A11
  movaps 0x10+A_OFFSET_21(A), A12
  movaps 0x20+A_OFFSET_21(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_21(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_21(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_21(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_21(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_21(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_21(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_21(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_21(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_21(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_21(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_21(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_21(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_21(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_22:

  # Check norm of product ||A(2,2)||*||B(2,1)||.
  movss 0x14+OFFSET_NORM(A), B1
  mulss 0x10+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_23

  # Calculate C(2,1) += A(2,2)*B(2,1).
  movaps 0x0+B_OFFSET_21(B), B1
  movaps 0x10+B_OFFSET_21(B), B2
  movaps 0x20+B_OFFSET_21(B), B3
  movaps 0x30+B_OFFSET_21(B), B4
  movaps 0x0+A_OFFSET_22(A), A11
  movaps 0x10+A_OFFSET_22(A), A12
  movaps 0x20+A_OFFSET_22(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_22(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_22(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_22(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_22(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_22(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_22(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_22(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_22(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_22(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_22(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_22(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_22(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_22(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_23:

  # Check norm of product ||A(2,3)||*||B(3,1)||.
  movss 0x18+OFFSET_NORM(A), B1
  mulss 0x20+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_24

  # Calculate C(2,1) += A(2,3)*B(3,1).
  movaps 0x0+B_OFFSET_31(B), B1
  movaps 0x10+B_OFFSET_31(B), B2
  movaps 0x20+B_OFFSET_31(B), B3
  movaps 0x30+B_OFFSET_31(B), B4
  movaps 0x0+A_OFFSET_23(A), A11
  movaps 0x10+A_OFFSET_23(A), A12
  movaps 0x20+A_OFFSET_23(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_23(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_23(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_23(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_23(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_23(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_23(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_23(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_23(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_23(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_23(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_23(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_23(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_23(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_24:

  # Check norm of product ||A(2,4)||*||B(4,1)||.
  movss 0x1c+OFFSET_NORM(A), B1
  mulss 0x30+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_25

  # Calculate C(2,1) += A(2,4)*B(4,1).
  movaps 0x0+B_OFFSET_41(B), B1
  movaps 0x10+B_OFFSET_41(B), B2
  movaps 0x20+B_OFFSET_41(B), B3
  movaps 0x30+B_OFFSET_41(B), B4
  movaps 0x0+A_OFFSET_24(A), A11
  movaps 0x10+A_OFFSET_24(A), A12
  movaps 0x20+A_OFFSET_24(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_24(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_24(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_24(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_24(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_24(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_24(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_24(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_24(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_24(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_24(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_24(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_24(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_24(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_25:

  # Multiply C(2,1) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(2,1) to already existing.
  addps 0x0+C_OFFSET_21(C), C1
  addps 0x10+C_OFFSET_21(C), C2
  addps 0x20+C_OFFSET_21(C), C3
  addps 0x30+C_OFFSET_21(C), C4

  # Write out C(2,1) submatrix block.
  movaps C1, 0x0+C_OFFSET_21(C)
  movaps C2, 0x10+C_OFFSET_21(C)
  movaps C3, 0x20+C_OFFSET_21(C)
  movaps C4, 0x30+C_OFFSET_21(C)

  # Reset C(2,2) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  .align 16
jump_26:

  # Check norm of product ||A(2,1)||*||B(1,2)||.
  movss 0x10+OFFSET_NORM(A), B1
  mulss 0x4+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_27

  # Calculate C(2,2) += A(2,1)*B(1,2).
  movaps 0x0+B_OFFSET_12(B), B1
  movaps 0x10+B_OFFSET_12(B), B2
  movaps 0x20+B_OFFSET_12(B), B3
  movaps 0x30+B_OFFSET_12(B), B4
  movaps 0x0+A_OFFSET_21(A), A11
  movaps 0x10+A_OFFSET_21(A), A12
  movaps 0x20+A_OFFSET_21(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_21(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_21(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_21(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_21(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_21(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_21(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_21(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_21(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_21(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_21(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_21(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_21(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_21(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_27:

  # Check norm of product ||A(2,2)||*||B(2,2)||.
  movss 0x14+OFFSET_NORM(A), B1
  mulss 0x14+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_28

  # Calculate C(2,2) += A(2,2)*B(2,2).
  movaps 0x0+B_OFFSET_22(B), B1
  movaps 0x10+B_OFFSET_22(B), B2
  movaps 0x20+B_OFFSET_22(B), B3
  movaps 0x30+B_OFFSET_22(B), B4
  movaps 0x0+A_OFFSET_22(A), A11
  movaps 0x10+A_OFFSET_22(A), A12
  movaps 0x20+A_OFFSET_22(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_22(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_22(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_22(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_22(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_22(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_22(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_22(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_22(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_22(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_22(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_22(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_22(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_22(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_28:

  # Check norm of product ||A(2,3)||*||B(3,2)||.
  movss 0x18+OFFSET_NORM(A), B1
  mulss 0x24+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_29

  # Calculate C(2,2) += A(2,3)*B(3,2).
  movaps 0x0+B_OFFSET_32(B), B1
  movaps 0x10+B_OFFSET_32(B), B2
  movaps 0x20+B_OFFSET_32(B), B3
  movaps 0x30+B_OFFSET_32(B), B4
  movaps 0x0+A_OFFSET_23(A), A11
  movaps 0x10+A_OFFSET_23(A), A12
  movaps 0x20+A_OFFSET_23(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_23(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_23(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_23(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_23(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_23(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_23(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_23(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_23(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_23(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_23(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_23(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_23(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_23(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_29:

  # Check norm of product ||A(2,4)||*||B(4,2)||.
  movss 0x1c+OFFSET_NORM(A), B1
  mulss 0x34+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_30

  # Calculate C(2,2) += A(2,4)*B(4,2).
  movaps 0x0+B_OFFSET_42(B), B1
  movaps 0x10+B_OFFSET_42(B), B2
  movaps 0x20+B_OFFSET_42(B), B3
  movaps 0x30+B_OFFSET_42(B), B4
  movaps 0x0+A_OFFSET_24(A), A11
  movaps 0x10+A_OFFSET_24(A), A12
  movaps 0x20+A_OFFSET_24(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_24(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_24(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_24(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_24(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_24(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_24(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_24(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_24(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_24(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_24(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_24(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_24(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_24(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_30:

  # Multiply C(2,2) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(2,2) to already existing.
  addps 0x0+C_OFFSET_22(C), C1
  addps 0x10+C_OFFSET_22(C), C2
  addps 0x20+C_OFFSET_22(C), C3
  addps 0x30+C_OFFSET_22(C), C4

  # Write out C(2,2) submatrix block.
  movaps C1, 0x0+C_OFFSET_22(C)
  movaps C2, 0x10+C_OFFSET_22(C)
  movaps C3, 0x20+C_OFFSET_22(C)
  movaps C4, 0x30+C_OFFSET_22(C)

  # Reset C(2,3) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  .align 16
jump_31:

  # Check norm of product ||A(2,1)||*||B(1,3)||.
  movss 0x10+OFFSET_NORM(A), B1
  mulss 0x8+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_32

  # Calculate C(2,3) += A(2,1)*B(1,3).
  movaps 0x0+B_OFFSET_13(B), B1
  movaps 0x10+B_OFFSET_13(B), B2
  movaps 0x20+B_OFFSET_13(B), B3
  movaps 0x30+B_OFFSET_13(B), B4
  movaps 0x0+A_OFFSET_21(A), A11
  movaps 0x10+A_OFFSET_21(A), A12
  movaps 0x20+A_OFFSET_21(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_21(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_21(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_21(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_21(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_21(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_21(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_21(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_21(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_21(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_21(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_21(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_21(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_21(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_32:

  # Check norm of product ||A(2,2)||*||B(2,3)||.
  movss 0x14+OFFSET_NORM(A), B1
  mulss 0x18+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_33

  # Calculate C(2,3) += A(2,2)*B(2,3).
  movaps 0x0+B_OFFSET_23(B), B1
  movaps 0x10+B_OFFSET_23(B), B2
  movaps 0x20+B_OFFSET_23(B), B3
  movaps 0x30+B_OFFSET_23(B), B4
  movaps 0x0+A_OFFSET_22(A), A11
  movaps 0x10+A_OFFSET_22(A), A12
  movaps 0x20+A_OFFSET_22(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_22(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_22(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_22(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_22(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_22(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_22(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_22(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_22(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_22(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_22(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_22(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_22(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_22(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_33:

  # Check norm of product ||A(2,3)||*||B(3,3)||.
  movss 0x18+OFFSET_NORM(A), B1
  mulss 0x28+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_34

  # Calculate C(2,3) += A(2,3)*B(3,3).
  movaps 0x0+B_OFFSET_33(B), B1
  movaps 0x10+B_OFFSET_33(B), B2
  movaps 0x20+B_OFFSET_33(B), B3
  movaps 0x30+B_OFFSET_33(B), B4
  movaps 0x0+A_OFFSET_23(A), A11
  movaps 0x10+A_OFFSET_23(A), A12
  movaps 0x20+A_OFFSET_23(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_23(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_23(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_23(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_23(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_23(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_23(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_23(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_23(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_23(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_23(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_23(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_23(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_23(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_34:

  # Check norm of product ||A(2,4)||*||B(4,3)||.
  movss 0x1c+OFFSET_NORM(A), B1
  mulss 0x38+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_35

  # Calculate C(2,3) += A(2,4)*B(4,3).
  movaps 0x0+B_OFFSET_43(B), B1
  movaps 0x10+B_OFFSET_43(B), B2
  movaps 0x20+B_OFFSET_43(B), B3
  movaps 0x30+B_OFFSET_43(B), B4
  movaps 0x0+A_OFFSET_24(A), A11
  movaps 0x10+A_OFFSET_24(A), A12
  movaps 0x20+A_OFFSET_24(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_24(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_24(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_24(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_24(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_24(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_24(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_24(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_24(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_24(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_24(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_24(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_24(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_24(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_35:

  # Multiply C(2,3) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(2,3) to already existing.
  addps 0x0+C_OFFSET_23(C), C1
  addps 0x10+C_OFFSET_23(C), C2
  addps 0x20+C_OFFSET_23(C), C3
  addps 0x30+C_OFFSET_23(C), C4

  # Write out C(2,3) submatrix block.
  movaps C1, 0x0+C_OFFSET_23(C)
  movaps C2, 0x10+C_OFFSET_23(C)
  movaps C3, 0x20+C_OFFSET_23(C)
  movaps C4, 0x30+C_OFFSET_23(C)

  # Reset C(2,4) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  .align 16
jump_36:

  # Check norm of product ||A(2,1)||*||B(1,4)||.
  movss 0x10+OFFSET_NORM(A), B1
  mulss 0xc+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_37

  # Calculate C(2,4) += A(2,1)*B(1,4).
  movaps 0x0+B_OFFSET_14(B), B1
  movaps 0x10+B_OFFSET_14(B), B2
  movaps 0x20+B_OFFSET_14(B), B3
  movaps 0x30+B_OFFSET_14(B), B4
  movaps 0x0+A_OFFSET_21(A), A11
  movaps 0x10+A_OFFSET_21(A), A12
  movaps 0x20+A_OFFSET_21(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_21(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_21(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_21(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_21(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_21(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_21(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_21(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_21(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_21(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_21(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_21(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_21(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_21(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_37:

  # Check norm of product ||A(2,2)||*||B(2,4)||.
  movss 0x14+OFFSET_NORM(A), B1
  mulss 0x1c+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_38

  # Calculate C(2,4) += A(2,2)*B(2,4).
  movaps 0x0+B_OFFSET_24(B), B1
  movaps 0x10+B_OFFSET_24(B), B2
  movaps 0x20+B_OFFSET_24(B), B3
  movaps 0x30+B_OFFSET_24(B), B4
  movaps 0x0+A_OFFSET_22(A), A11
  movaps 0x10+A_OFFSET_22(A), A12
  movaps 0x20+A_OFFSET_22(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_22(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_22(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_22(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_22(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_22(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_22(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_22(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_22(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_22(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_22(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_22(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_22(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_22(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_38:

  # Check norm of product ||A(2,3)||*||B(3,4)||.
  movss 0x18+OFFSET_NORM(A), B1
  mulss 0x2c+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_39

  # Calculate C(2,4) += A(2,3)*B(3,4).
  movaps 0x0+B_OFFSET_34(B), B1
  movaps 0x10+B_OFFSET_34(B), B2
  movaps 0x20+B_OFFSET_34(B), B3
  movaps 0x30+B_OFFSET_34(B), B4
  movaps 0x0+A_OFFSET_23(A), A11
  movaps 0x10+A_OFFSET_23(A), A12
  movaps 0x20+A_OFFSET_23(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_23(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_23(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_23(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_23(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_23(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_23(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_23(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_23(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_23(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_23(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_23(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_23(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_23(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_39:

  # Check norm of product ||A(2,4)||*||B(4,4)||.
  movss 0x1c+OFFSET_NORM(A), B1
  mulss 0x3c+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_40

  # Calculate C(2,4) += A(2,4)*B(4,4).
  movaps 0x0+B_OFFSET_44(B), B1
  movaps 0x10+B_OFFSET_44(B), B2
  movaps 0x20+B_OFFSET_44(B), B3
  movaps 0x30+B_OFFSET_44(B), B4
  movaps 0x0+A_OFFSET_24(A), A11
  movaps 0x10+A_OFFSET_24(A), A12
  movaps 0x20+A_OFFSET_24(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_24(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_24(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_24(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_24(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_24(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_24(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_24(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_24(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_24(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_24(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_24(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_24(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_24(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_40:

  # Multiply C(2,4) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(2,4) to already existing.
  addps 0x0+C_OFFSET_24(C), C1
  addps 0x10+C_OFFSET_24(C), C2
  addps 0x20+C_OFFSET_24(C), C3
  addps 0x30+C_OFFSET_24(C), C4

  # Write out C(2,4) submatrix block.
  movaps C1, 0x0+C_OFFSET_24(C)
  movaps C2, 0x10+C_OFFSET_24(C)
  movaps C3, 0x20+C_OFFSET_24(C)
  movaps C4, 0x30+C_OFFSET_24(C)

  # Reset C(3,1) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  .align 16
jump_41:

  # Check norm of product ||A(3,1)||*||B(1,1)||.
  movss 0x20+OFFSET_NORM(A), B1
  mulss 0x0+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_42

  # Calculate C(3,1) += A(3,1)*B(1,1).
  movaps 0x0+B_OFFSET_11(B), B1
  movaps 0x10+B_OFFSET_11(B), B2
  movaps 0x20+B_OFFSET_11(B), B3
  movaps 0x30+B_OFFSET_11(B), B4
  movaps 0x0+A_OFFSET_31(A), A11
  movaps 0x10+A_OFFSET_31(A), A12
  movaps 0x20+A_OFFSET_31(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_31(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_31(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_31(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_31(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_31(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_31(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_31(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_31(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_31(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_31(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_31(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_31(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_31(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_42:

  # Check norm of product ||A(3,2)||*||B(2,1)||.
  movss 0x24+OFFSET_NORM(A), B1
  mulss 0x10+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_43

  # Calculate C(3,1) += A(3,2)*B(2,1).
  movaps 0x0+B_OFFSET_21(B), B1
  movaps 0x10+B_OFFSET_21(B), B2
  movaps 0x20+B_OFFSET_21(B), B3
  movaps 0x30+B_OFFSET_21(B), B4
  movaps 0x0+A_OFFSET_32(A), A11
  movaps 0x10+A_OFFSET_32(A), A12
  movaps 0x20+A_OFFSET_32(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_32(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_32(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_32(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_32(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_32(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_32(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_32(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_32(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_32(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_32(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_32(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_32(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_32(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_43:

  # Check norm of product ||A(3,3)||*||B(3,1)||.
  movss 0x28+OFFSET_NORM(A), B1
  mulss 0x20+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_44

  # Calculate C(3,1) += A(3,3)*B(3,1).
  movaps 0x0+B_OFFSET_31(B), B1
  movaps 0x10+B_OFFSET_31(B), B2
  movaps 0x20+B_OFFSET_31(B), B3
  movaps 0x30+B_OFFSET_31(B), B4
  movaps 0x0+A_OFFSET_33(A), A11
  movaps 0x10+A_OFFSET_33(A), A12
  movaps 0x20+A_OFFSET_33(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_33(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_33(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_33(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_33(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_33(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_33(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_33(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_33(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_33(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_33(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_33(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_33(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_33(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_44:

  # Check norm of product ||A(3,4)||*||B(4,1)||.
  movss 0x2c+OFFSET_NORM(A), B1
  mulss 0x30+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_45

  # Calculate C(3,1) += A(3,4)*B(4,1).
  movaps 0x0+B_OFFSET_41(B), B1
  movaps 0x10+B_OFFSET_41(B), B2
  movaps 0x20+B_OFFSET_41(B), B3
  movaps 0x30+B_OFFSET_41(B), B4
  movaps 0x0+A_OFFSET_34(A), A11
  movaps 0x10+A_OFFSET_34(A), A12
  movaps 0x20+A_OFFSET_34(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_34(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_34(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_34(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_34(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_34(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_34(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_34(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_34(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_34(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_34(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_34(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_34(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_34(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_45:

  # Multiply C(3,1) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(3,1) to already existing.
  addps 0x0+C_OFFSET_31(C), C1
  addps 0x10+C_OFFSET_31(C), C2
  addps 0x20+C_OFFSET_31(C), C3
  addps 0x30+C_OFFSET_31(C), C4

  # Write out C(3,1) submatrix block.
  movaps C1, 0x0+C_OFFSET_31(C)
  movaps C2, 0x10+C_OFFSET_31(C)
  movaps C3, 0x20+C_OFFSET_31(C)
  movaps C4, 0x30+C_OFFSET_31(C)

  # Reset C(3,2) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  .align 16
jump_46:

  # Check norm of product ||A(3,1)||*||B(1,2)||.
  movss 0x20+OFFSET_NORM(A), B1
  mulss 0x4+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_47

  # Calculate C(3,2) += A(3,1)*B(1,2).
  movaps 0x0+B_OFFSET_12(B), B1
  movaps 0x10+B_OFFSET_12(B), B2
  movaps 0x20+B_OFFSET_12(B), B3
  movaps 0x30+B_OFFSET_12(B), B4
  movaps 0x0+A_OFFSET_31(A), A11
  movaps 0x10+A_OFFSET_31(A), A12
  movaps 0x20+A_OFFSET_31(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_31(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_31(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_31(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_31(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_31(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_31(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_31(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_31(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_31(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_31(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_31(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_31(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_31(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_47:

  # Check norm of product ||A(3,2)||*||B(2,2)||.
  movss 0x24+OFFSET_NORM(A), B1
  mulss 0x14+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_48

  # Calculate C(3,2) += A(3,2)*B(2,2).
  movaps 0x0+B_OFFSET_22(B), B1
  movaps 0x10+B_OFFSET_22(B), B2
  movaps 0x20+B_OFFSET_22(B), B3
  movaps 0x30+B_OFFSET_22(B), B4
  movaps 0x0+A_OFFSET_32(A), A11
  movaps 0x10+A_OFFSET_32(A), A12
  movaps 0x20+A_OFFSET_32(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_32(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_32(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_32(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_32(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_32(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_32(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_32(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_32(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_32(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_32(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_32(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_32(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_32(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_48:

  # Check norm of product ||A(3,3)||*||B(3,2)||.
  movss 0x28+OFFSET_NORM(A), B1
  mulss 0x24+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_49

  # Calculate C(3,2) += A(3,3)*B(3,2).
  movaps 0x0+B_OFFSET_32(B), B1
  movaps 0x10+B_OFFSET_32(B), B2
  movaps 0x20+B_OFFSET_32(B), B3
  movaps 0x30+B_OFFSET_32(B), B4
  movaps 0x0+A_OFFSET_33(A), A11
  movaps 0x10+A_OFFSET_33(A), A12
  movaps 0x20+A_OFFSET_33(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_33(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_33(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_33(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_33(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_33(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_33(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_33(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_33(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_33(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_33(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_33(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_33(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_33(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_49:

  # Check norm of product ||A(3,4)||*||B(4,2)||.
  movss 0x2c+OFFSET_NORM(A), B1
  mulss 0x34+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_50

  # Calculate C(3,2) += A(3,4)*B(4,2).
  movaps 0x0+B_OFFSET_42(B), B1
  movaps 0x10+B_OFFSET_42(B), B2
  movaps 0x20+B_OFFSET_42(B), B3
  movaps 0x30+B_OFFSET_42(B), B4
  movaps 0x0+A_OFFSET_34(A), A11
  movaps 0x10+A_OFFSET_34(A), A12
  movaps 0x20+A_OFFSET_34(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_34(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_34(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_34(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_34(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_34(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_34(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_34(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_34(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_34(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_34(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_34(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_34(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_34(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_50:

  # Multiply C(3,2) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(3,2) to already existing.
  addps 0x0+C_OFFSET_32(C), C1
  addps 0x10+C_OFFSET_32(C), C2
  addps 0x20+C_OFFSET_32(C), C3
  addps 0x30+C_OFFSET_32(C), C4

  # Write out C(3,2) submatrix block.
  movaps C1, 0x0+C_OFFSET_32(C)
  movaps C2, 0x10+C_OFFSET_32(C)
  movaps C3, 0x20+C_OFFSET_32(C)
  movaps C4, 0x30+C_OFFSET_32(C)

  # Reset C(3,3) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  .align 16
jump_51:

  # Check norm of product ||A(3,1)||*||B(1,3)||.
  movss 0x20+OFFSET_NORM(A), B1
  mulss 0x8+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_52

  # Calculate C(3,3) += A(3,1)*B(1,3).
  movaps 0x0+B_OFFSET_13(B), B1
  movaps 0x10+B_OFFSET_13(B), B2
  movaps 0x20+B_OFFSET_13(B), B3
  movaps 0x30+B_OFFSET_13(B), B4
  movaps 0x0+A_OFFSET_31(A), A11
  movaps 0x10+A_OFFSET_31(A), A12
  movaps 0x20+A_OFFSET_31(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_31(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_31(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_31(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_31(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_31(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_31(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_31(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_31(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_31(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_31(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_31(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_31(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_31(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_52:

  # Check norm of product ||A(3,2)||*||B(2,3)||.
  movss 0x24+OFFSET_NORM(A), B1
  mulss 0x18+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_53

  # Calculate C(3,3) += A(3,2)*B(2,3).
  movaps 0x0+B_OFFSET_23(B), B1
  movaps 0x10+B_OFFSET_23(B), B2
  movaps 0x20+B_OFFSET_23(B), B3
  movaps 0x30+B_OFFSET_23(B), B4
  movaps 0x0+A_OFFSET_32(A), A11
  movaps 0x10+A_OFFSET_32(A), A12
  movaps 0x20+A_OFFSET_32(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_32(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_32(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_32(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_32(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_32(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_32(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_32(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_32(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_32(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_32(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_32(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_32(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_32(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_53:

  # Check norm of product ||A(3,3)||*||B(3,3)||.
  movss 0x28+OFFSET_NORM(A), B1
  mulss 0x28+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_54

  # Calculate C(3,3) += A(3,3)*B(3,3).
  movaps 0x0+B_OFFSET_33(B), B1
  movaps 0x10+B_OFFSET_33(B), B2
  movaps 0x20+B_OFFSET_33(B), B3
  movaps 0x30+B_OFFSET_33(B), B4
  movaps 0x0+A_OFFSET_33(A), A11
  movaps 0x10+A_OFFSET_33(A), A12
  movaps 0x20+A_OFFSET_33(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_33(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_33(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_33(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_33(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_33(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_33(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_33(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_33(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_33(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_33(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_33(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_33(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_33(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_54:

  # Check norm of product ||A(3,4)||*||B(4,3)||.
  movss 0x2c+OFFSET_NORM(A), B1
  mulss 0x38+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_55

  # Calculate C(3,3) += A(3,4)*B(4,3).
  movaps 0x0+B_OFFSET_43(B), B1
  movaps 0x10+B_OFFSET_43(B), B2
  movaps 0x20+B_OFFSET_43(B), B3
  movaps 0x30+B_OFFSET_43(B), B4
  movaps 0x0+A_OFFSET_34(A), A11
  movaps 0x10+A_OFFSET_34(A), A12
  movaps 0x20+A_OFFSET_34(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_34(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_34(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_34(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_34(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_34(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_34(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_34(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_34(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_34(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_34(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_34(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_34(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_34(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_55:

  # Multiply C(3,3) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(3,3) to already existing.
  addps 0x0+C_OFFSET_33(C), C1
  addps 0x10+C_OFFSET_33(C), C2
  addps 0x20+C_OFFSET_33(C), C3
  addps 0x30+C_OFFSET_33(C), C4

  # Write out C(3,3) submatrix block.
  movaps C1, 0x0+C_OFFSET_33(C)
  movaps C2, 0x10+C_OFFSET_33(C)
  movaps C3, 0x20+C_OFFSET_33(C)
  movaps C4, 0x30+C_OFFSET_33(C)

  # Reset C(3,4) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  .align 16
jump_56:

  # Check norm of product ||A(3,1)||*||B(1,4)||.
  movss 0x20+OFFSET_NORM(A), B1
  mulss 0xc+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_57

  # Calculate C(3,4) += A(3,1)*B(1,4).
  movaps 0x0+B_OFFSET_14(B), B1
  movaps 0x10+B_OFFSET_14(B), B2
  movaps 0x20+B_OFFSET_14(B), B3
  movaps 0x30+B_OFFSET_14(B), B4
  movaps 0x0+A_OFFSET_31(A), A11
  movaps 0x10+A_OFFSET_31(A), A12
  movaps 0x20+A_OFFSET_31(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_31(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_31(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_31(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_31(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_31(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_31(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_31(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_31(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_31(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_31(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_31(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_31(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_31(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_57:

  # Check norm of product ||A(3,2)||*||B(2,4)||.
  movss 0x24+OFFSET_NORM(A), B1
  mulss 0x1c+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_58

  # Calculate C(3,4) += A(3,2)*B(2,4).
  movaps 0x0+B_OFFSET_24(B), B1
  movaps 0x10+B_OFFSET_24(B), B2
  movaps 0x20+B_OFFSET_24(B), B3
  movaps 0x30+B_OFFSET_24(B), B4
  movaps 0x0+A_OFFSET_32(A), A11
  movaps 0x10+A_OFFSET_32(A), A12
  movaps 0x20+A_OFFSET_32(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_32(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_32(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_32(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_32(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_32(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_32(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_32(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_32(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_32(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_32(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_32(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_32(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_32(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_58:

  # Check norm of product ||A(3,3)||*||B(3,4)||.
  movss 0x28+OFFSET_NORM(A), B1
  mulss 0x2c+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_59

  # Calculate C(3,4) += A(3,3)*B(3,4).
  movaps 0x0+B_OFFSET_34(B), B1
  movaps 0x10+B_OFFSET_34(B), B2
  movaps 0x20+B_OFFSET_34(B), B3
  movaps 0x30+B_OFFSET_34(B), B4
  movaps 0x0+A_OFFSET_33(A), A11
  movaps 0x10+A_OFFSET_33(A), A12
  movaps 0x20+A_OFFSET_33(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_33(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_33(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_33(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_33(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_33(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_33(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_33(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_33(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_33(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_33(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_33(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_33(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_33(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_59:

  # Check norm of product ||A(3,4)||*||B(4,4)||.
  movss 0x2c+OFFSET_NORM(A), B1
  mulss 0x3c+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_60

  # Calculate C(3,4) += A(3,4)*B(4,4).
  movaps 0x0+B_OFFSET_44(B), B1
  movaps 0x10+B_OFFSET_44(B), B2
  movaps 0x20+B_OFFSET_44(B), B3
  movaps 0x30+B_OFFSET_44(B), B4
  movaps 0x0+A_OFFSET_34(A), A11
  movaps 0x10+A_OFFSET_34(A), A12
  movaps 0x20+A_OFFSET_34(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_34(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_34(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_34(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_34(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_34(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_34(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_34(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_34(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_34(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_34(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_34(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_34(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_34(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_60:

  # Multiply C(3,4) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(3,4) to already existing.
  addps 0x0+C_OFFSET_34(C), C1
  addps 0x10+C_OFFSET_34(C), C2
  addps 0x20+C_OFFSET_34(C), C3
  addps 0x30+C_OFFSET_34(C), C4

  # Write out C(3,4) submatrix block.
  movaps C1, 0x0+C_OFFSET_34(C)
  movaps C2, 0x10+C_OFFSET_34(C)
  movaps C3, 0x20+C_OFFSET_34(C)
  movaps C4, 0x30+C_OFFSET_34(C)

  # Reset C(4,1) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  .align 16
jump_61:

  # Check norm of product ||A(4,1)||*||B(1,1)||.
  movss 0x30+OFFSET_NORM(A), B1
  mulss 0x0+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_62

  # Calculate C(4,1) += A(4,1)*B(1,1).
  movaps 0x0+B_OFFSET_11(B), B1
  movaps 0x10+B_OFFSET_11(B), B2
  movaps 0x20+B_OFFSET_11(B), B3
  movaps 0x30+B_OFFSET_11(B), B4
  movaps 0x0+A_OFFSET_41(A), A11
  movaps 0x10+A_OFFSET_41(A), A12
  movaps 0x20+A_OFFSET_41(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_41(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_41(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_41(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_41(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_41(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_41(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_41(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_41(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_41(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_41(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_41(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_41(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_41(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_62:

  # Check norm of product ||A(4,2)||*||B(2,1)||.
  movss 0x34+OFFSET_NORM(A), B1
  mulss 0x10+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_63

  # Calculate C(4,1) += A(4,2)*B(2,1).
  movaps 0x0+B_OFFSET_21(B), B1
  movaps 0x10+B_OFFSET_21(B), B2
  movaps 0x20+B_OFFSET_21(B), B3
  movaps 0x30+B_OFFSET_21(B), B4
  movaps 0x0+A_OFFSET_42(A), A11
  movaps 0x10+A_OFFSET_42(A), A12
  movaps 0x20+A_OFFSET_42(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_42(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_42(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_42(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_42(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_42(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_42(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_42(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_42(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_42(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_42(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_42(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_42(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_42(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_63:

  # Check norm of product ||A(4,3)||*||B(3,1)||.
  movss 0x38+OFFSET_NORM(A), B1
  mulss 0x20+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_64

  # Calculate C(4,1) += A(4,3)*B(3,1).
  movaps 0x0+B_OFFSET_31(B), B1
  movaps 0x10+B_OFFSET_31(B), B2
  movaps 0x20+B_OFFSET_31(B), B3
  movaps 0x30+B_OFFSET_31(B), B4
  movaps 0x0+A_OFFSET_43(A), A11
  movaps 0x10+A_OFFSET_43(A), A12
  movaps 0x20+A_OFFSET_43(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_43(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_43(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_43(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_43(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_43(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_43(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_43(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_43(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_43(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_43(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_43(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_43(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_43(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_64:

  # Check norm of product ||A(4,4)||*||B(4,1)||.
  movss 0x3c+OFFSET_NORM(A), B1
  mulss 0x30+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_65

  # Calculate C(4,1) += A(4,4)*B(4,1).
  movaps 0x0+B_OFFSET_41(B), B1
  movaps 0x10+B_OFFSET_41(B), B2
  movaps 0x20+B_OFFSET_41(B), B3
  movaps 0x30+B_OFFSET_41(B), B4
  movaps 0x0+A_OFFSET_44(A), A11
  movaps 0x10+A_OFFSET_44(A), A12
  movaps 0x20+A_OFFSET_44(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_44(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_44(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_44(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_44(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_44(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_44(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_44(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_44(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_44(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_44(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_44(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_44(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_44(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_65:

  # Multiply C(4,1) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(4,1) to already existing.
  addps 0x0+C_OFFSET_41(C), C1
  addps 0x10+C_OFFSET_41(C), C2
  addps 0x20+C_OFFSET_41(C), C3
  addps 0x30+C_OFFSET_41(C), C4

  # Write out C(4,1) submatrix block.
  movaps C1, 0x0+C_OFFSET_41(C)
  movaps C2, 0x10+C_OFFSET_41(C)
  movaps C3, 0x20+C_OFFSET_41(C)
  movaps C4, 0x30+C_OFFSET_41(C)

  # Reset C(4,2) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  .align 16
jump_66:

  # Check norm of product ||A(4,1)||*||B(1,2)||.
  movss 0x30+OFFSET_NORM(A), B1
  mulss 0x4+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_67

  # Calculate C(4,2) += A(4,1)*B(1,2).
  movaps 0x0+B_OFFSET_12(B), B1
  movaps 0x10+B_OFFSET_12(B), B2
  movaps 0x20+B_OFFSET_12(B), B3
  movaps 0x30+B_OFFSET_12(B), B4
  movaps 0x0+A_OFFSET_41(A), A11
  movaps 0x10+A_OFFSET_41(A), A12
  movaps 0x20+A_OFFSET_41(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_41(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_41(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_41(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_41(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_41(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_41(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_41(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_41(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_41(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_41(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_41(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_41(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_41(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_67:

  # Check norm of product ||A(4,2)||*||B(2,2)||.
  movss 0x34+OFFSET_NORM(A), B1
  mulss 0x14+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_68

  # Calculate C(4,2) += A(4,2)*B(2,2).
  movaps 0x0+B_OFFSET_22(B), B1
  movaps 0x10+B_OFFSET_22(B), B2
  movaps 0x20+B_OFFSET_22(B), B3
  movaps 0x30+B_OFFSET_22(B), B4
  movaps 0x0+A_OFFSET_42(A), A11
  movaps 0x10+A_OFFSET_42(A), A12
  movaps 0x20+A_OFFSET_42(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_42(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_42(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_42(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_42(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_42(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_42(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_42(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_42(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_42(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_42(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_42(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_42(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_42(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_68:

  # Check norm of product ||A(4,3)||*||B(3,2)||.
  movss 0x38+OFFSET_NORM(A), B1
  mulss 0x24+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_69

  # Calculate C(4,2) += A(4,3)*B(3,2).
  movaps 0x0+B_OFFSET_32(B), B1
  movaps 0x10+B_OFFSET_32(B), B2
  movaps 0x20+B_OFFSET_32(B), B3
  movaps 0x30+B_OFFSET_32(B), B4
  movaps 0x0+A_OFFSET_43(A), A11
  movaps 0x10+A_OFFSET_43(A), A12
  movaps 0x20+A_OFFSET_43(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_43(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_43(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_43(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_43(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_43(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_43(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_43(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_43(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_43(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_43(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_43(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_43(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_43(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_69:

  # Check norm of product ||A(4,4)||*||B(4,2)||.
  movss 0x3c+OFFSET_NORM(A), B1
  mulss 0x34+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_70

  # Calculate C(4,2) += A(4,4)*B(4,2).
  movaps 0x0+B_OFFSET_42(B), B1
  movaps 0x10+B_OFFSET_42(B), B2
  movaps 0x20+B_OFFSET_42(B), B3
  movaps 0x30+B_OFFSET_42(B), B4
  movaps 0x0+A_OFFSET_44(A), A11
  movaps 0x10+A_OFFSET_44(A), A12
  movaps 0x20+A_OFFSET_44(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_44(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_44(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_44(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_44(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_44(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_44(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_44(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_44(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_44(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_44(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_44(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_44(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_44(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_70:

  # Multiply C(4,2) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(4,2) to already existing.
  addps 0x0+C_OFFSET_42(C), C1
  addps 0x10+C_OFFSET_42(C), C2
  addps 0x20+C_OFFSET_42(C), C3
  addps 0x30+C_OFFSET_42(C), C4

  # Write out C(4,2) submatrix block.
  movaps C1, 0x0+C_OFFSET_42(C)
  movaps C2, 0x10+C_OFFSET_42(C)
  movaps C3, 0x20+C_OFFSET_42(C)
  movaps C4, 0x30+C_OFFSET_42(C)

  # Reset C(4,3) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  .align 16
jump_71:

  # Check norm of product ||A(4,1)||*||B(1,3)||.
  movss 0x30+OFFSET_NORM(A), B1
  mulss 0x8+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_72

  # Calculate C(4,3) += A(4,1)*B(1,3).
  movaps 0x0+B_OFFSET_13(B), B1
  movaps 0x10+B_OFFSET_13(B), B2
  movaps 0x20+B_OFFSET_13(B), B3
  movaps 0x30+B_OFFSET_13(B), B4
  movaps 0x0+A_OFFSET_41(A), A11
  movaps 0x10+A_OFFSET_41(A), A12
  movaps 0x20+A_OFFSET_41(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_41(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_41(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_41(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_41(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_41(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_41(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_41(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_41(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_41(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_41(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_41(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_41(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_41(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_72:

  # Check norm of product ||A(4,2)||*||B(2,3)||.
  movss 0x34+OFFSET_NORM(A), B1
  mulss 0x18+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_73

  # Calculate C(4,3) += A(4,2)*B(2,3).
  movaps 0x0+B_OFFSET_23(B), B1
  movaps 0x10+B_OFFSET_23(B), B2
  movaps 0x20+B_OFFSET_23(B), B3
  movaps 0x30+B_OFFSET_23(B), B4
  movaps 0x0+A_OFFSET_42(A), A11
  movaps 0x10+A_OFFSET_42(A), A12
  movaps 0x20+A_OFFSET_42(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_42(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_42(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_42(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_42(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_42(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_42(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_42(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_42(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_42(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_42(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_42(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_42(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_42(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_73:

  # Check norm of product ||A(4,3)||*||B(3,3)||.
  movss 0x38+OFFSET_NORM(A), B1
  mulss 0x28+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_74

  # Calculate C(4,3) += A(4,3)*B(3,3).
  movaps 0x0+B_OFFSET_33(B), B1
  movaps 0x10+B_OFFSET_33(B), B2
  movaps 0x20+B_OFFSET_33(B), B3
  movaps 0x30+B_OFFSET_33(B), B4
  movaps 0x0+A_OFFSET_43(A), A11
  movaps 0x10+A_OFFSET_43(A), A12
  movaps 0x20+A_OFFSET_43(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_43(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_43(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_43(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_43(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_43(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_43(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_43(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_43(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_43(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_43(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_43(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_43(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_43(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_74:

  # Check norm of product ||A(4,4)||*||B(4,3)||.
  movss 0x3c+OFFSET_NORM(A), B1
  mulss 0x38+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_75

  # Calculate C(4,3) += A(4,4)*B(4,3).
  movaps 0x0+B_OFFSET_43(B), B1
  movaps 0x10+B_OFFSET_43(B), B2
  movaps 0x20+B_OFFSET_43(B), B3
  movaps 0x30+B_OFFSET_43(B), B4
  movaps 0x0+A_OFFSET_44(A), A11
  movaps 0x10+A_OFFSET_44(A), A12
  movaps 0x20+A_OFFSET_44(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_44(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_44(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_44(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_44(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_44(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_44(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_44(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_44(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_44(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_44(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_44(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_44(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_44(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_75:

  # Multiply C(4,3) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(4,3) to already existing.
  addps 0x0+C_OFFSET_43(C), C1
  addps 0x10+C_OFFSET_43(C), C2
  addps 0x20+C_OFFSET_43(C), C3
  addps 0x30+C_OFFSET_43(C), C4

  # Write out C(4,3) submatrix block.
  movaps C1, 0x0+C_OFFSET_43(C)
  movaps C2, 0x10+C_OFFSET_43(C)
  movaps C3, 0x20+C_OFFSET_43(C)
  movaps C4, 0x30+C_OFFSET_43(C)

  # Reset C(4,4) matrix block accumulators.
  xorps C1, C1
  xorps C2, C2
  xorps C3, C3
  xorps C4, C4

  .align 16
jump_76:

  # Check norm of product ||A(4,1)||*||B(1,4)||.
  movss 0x30+OFFSET_NORM(A), B1
  mulss 0xc+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_77

  # Calculate C(4,4) += A(4,1)*B(1,4).
  movaps 0x0+B_OFFSET_14(B), B1
  movaps 0x10+B_OFFSET_14(B), B2
  movaps 0x20+B_OFFSET_14(B), B3
  movaps 0x30+B_OFFSET_14(B), B4
  movaps 0x0+A_OFFSET_41(A), A11
  movaps 0x10+A_OFFSET_41(A), A12
  movaps 0x20+A_OFFSET_41(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_41(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_41(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_41(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_41(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_41(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_41(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_41(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_41(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_41(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_41(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_41(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_41(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_41(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_77:

  # Check norm of product ||A(4,2)||*||B(2,4)||.
  movss 0x34+OFFSET_NORM(A), B1
  mulss 0x1c+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_78

  # Calculate C(4,4) += A(4,2)*B(2,4).
  movaps 0x0+B_OFFSET_24(B), B1
  movaps 0x10+B_OFFSET_24(B), B2
  movaps 0x20+B_OFFSET_24(B), B3
  movaps 0x30+B_OFFSET_24(B), B4
  movaps 0x0+A_OFFSET_42(A), A11
  movaps 0x10+A_OFFSET_42(A), A12
  movaps 0x20+A_OFFSET_42(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_42(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_42(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_42(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_42(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_42(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_42(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_42(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_42(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_42(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_42(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_42(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_42(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_42(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_78:

  # Check norm of product ||A(4,3)||*||B(3,4)||.
  movss 0x38+OFFSET_NORM(A), B1
  mulss 0x2c+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_79

  # Calculate C(4,4) += A(4,3)*B(3,4).
  movaps 0x0+B_OFFSET_34(B), B1
  movaps 0x10+B_OFFSET_34(B), B2
  movaps 0x20+B_OFFSET_34(B), B3
  movaps 0x30+B_OFFSET_34(B), B4
  movaps 0x0+A_OFFSET_43(A), A11
  movaps 0x10+A_OFFSET_43(A), A12
  movaps 0x20+A_OFFSET_43(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_43(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_43(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_43(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_43(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_43(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_43(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_43(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_43(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_43(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_43(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_43(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_43(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_43(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_79:

  # Check norm of product ||A(4,4)||*||B(4,4)||.
  movss 0x3c+OFFSET_NORM(A), B1
  mulss 0x3c+OFFSET_NORM(B), B1
  comiss tolerance, B1
  jbe jump_80

  # Calculate C(4,4) += A(4,4)*B(4,4).
  movaps 0x0+B_OFFSET_44(B), B1
  movaps 0x10+B_OFFSET_44(B), B2
  movaps 0x20+B_OFFSET_44(B), B3
  movaps 0x30+B_OFFSET_44(B), B4
  movaps 0x0+A_OFFSET_44(A), A11
  movaps 0x10+A_OFFSET_44(A), A12
  movaps 0x20+A_OFFSET_44(A), A13
  mulps B1, A11
  mulps B2, A12
  addps A11, C1
  movaps 0x30+A_OFFSET_44(A), A14
  mulps B3, A13
  addps A12, C1
  movaps 0x40+A_OFFSET_44(A), A21
  mulps B4, A14
  addps A13, C1
  movaps 0x50+A_OFFSET_44(A), A22
  mulps B1, A21
  addps A14, C1
  movaps 0x60+A_OFFSET_44(A), A23
  mulps B2, A22
  addps A21, C2
  movaps 0x70+A_OFFSET_44(A), A24
  mulps B3, A23
  addps A22, C2
  movaps 0x80+A_OFFSET_44(A), A31
  mulps B4, A24
  addps A23, C2
  movaps 0x90+A_OFFSET_44(A), A32
  mulps B1, A31
  addps A24, C2
  movaps 0xa0+A_OFFSET_44(A), A33
  mulps B2, A32
  addps A31, C3
  movaps 0xb0+A_OFFSET_44(A), A34
  mulps B3, A33
  addps A32, C3
  movaps 0xc0+A_OFFSET_44(A), A41
  mulps B4, A34
  addps A33, C3
  movaps 0xd0+A_OFFSET_44(A), A42
  mulps B1, A41
  addps A34, C3
  movaps 0xe0+A_OFFSET_44(A), A43
  mulps B2, A42
  addps A41, C4
  movaps 0xf0+A_OFFSET_44(A), A44
  mulps B3, A43
  addps A42, C4
  mulps B4, A44
  addps A43, C4
  addps A44, C4

  .align 16
jump_80:

  # Multiply C(4,4) by alpha.
  mulps alpha, C1
  mulps alpha, C2
  mulps alpha, C3
  mulps alpha, C4

  # Add accumulated C(4,4) to already existing.
  addps 0x0+C_OFFSET_44(C), C1
  addps 0x10+C_OFFSET_44(C), C2
  addps 0x20+C_OFFSET_44(C), C3
  addps 0x30+C_OFFSET_44(C), C4

  # Write out C(4,4) submatrix block.
  movaps C1, 0x0+C_OFFSET_44(C)
  movaps C2, 0x10+C_OFFSET_44(C)
  movaps C3, 0x20+C_OFFSET_44(C)
  movaps C4, 0x30+C_OFFSET_44(C)

  # Loop end.
  inc index
  mov index, base_pointer
  cmp number_stream_elements, index
  jb stream_loop

  .align 16
stream_done:

  # Pop registers from stack.
  pop C
  pop B
  pop A
  pop base_pointer
  pop index

  # Return from function.
  ret

  # Function epilog.
  .size spamm_stream_kernel, .-spamm_stream_kernel
